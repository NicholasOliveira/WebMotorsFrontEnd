{"ast":null,"code":"import { isString } from './is';\nimport { normalize } from './object';\n/**\n * Checks whether we're in the Node.js or Browser environment\n *\n * @returns Answer to given question\n */\n\nexport function isNodeEnv() {\n  return Object.prototype.toString.call(typeof process !== 'undefined' ? process : 0) === '[object process]';\n}\n/**\n * Requires a module which is protected against bundler minification.\n *\n * @param request The module path to resolve\n */\n// eslint-disable-next-line @typescript-eslint/explicit-module-boundary-types\n\nexport function dynamicRequire(mod, request) {\n  // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n  return mod.require(request);\n}\n/** Default request keys that'll be used to extract data from the request */\n\nvar DEFAULT_REQUEST_KEYS = ['cookies', 'data', 'headers', 'method', 'query_string', 'url'];\n/**\n * Normalizes data from the request object, accounting for framework differences.\n *\n * @param req The request object from which to extract data\n * @param keys An optional array of keys to include in the normalized data. Defaults to DEFAULT_REQUEST_KEYS if not\n * provided.\n * @returns An object containing normalized request data\n */\n\nexport function extractNodeRequestData(req, keys) {\n  if (keys === void 0) {\n    keys = DEFAULT_REQUEST_KEYS;\n  } // make sure we can safely use dynamicRequire below\n\n\n  if (!isNodeEnv()) {\n    throw new Error(\"Can't get node request data outside of a node environment\");\n  }\n\n  var requestData = {}; // headers:\n  //   node, express: req.headers\n  //   koa: req.header\n\n  var headers = req.headers || req.header || {}; // method:\n  //   node, express, koa: req.method\n\n  var method = req.method; // host:\n  //   express: req.hostname in > 4 and req.host in < 4\n  //   koa: req.host\n  //   node: req.headers.host\n\n  var host = req.hostname || req.host || headers.host || '<no host>'; // protocol:\n  //   node: <n/a>\n  //   express, koa: req.protocol\n\n  var protocol = req.protocol === 'https' || req.secure || (req.socket || {}).encrypted ? 'https' : 'http'; // url (including path and query string):\n  //   node, express: req.originalUrl\n  //   koa: req.url\n\n  var originalUrl = req.originalUrl || req.url || ''; // absolute url\n\n  var absoluteUrl = protocol + \"://\" + host + originalUrl;\n  keys.forEach(function (key) {\n    switch (key) {\n      case 'headers':\n        requestData.headers = headers;\n        break;\n\n      case 'method':\n        requestData.method = method;\n        break;\n\n      case 'url':\n        requestData.url = absoluteUrl;\n        break;\n\n      case 'cookies':\n        // cookies:\n        //   node, express, koa: req.headers.cookie\n        //   vercel, sails.js, express (w/ cookie middleware): req.cookies\n        // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n        requestData.cookies = req.cookies || dynamicRequire(module, 'cookie').parse(headers.cookie || '');\n        break;\n\n      case 'query_string':\n        // query string:\n        //   node: req.url (raw)\n        //   express, koa: req.query\n        // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n        requestData.query_string = dynamicRequire(module, 'url').parse(originalUrl || '', false).query;\n        break;\n\n      case 'data':\n        if (method === 'GET' || method === 'HEAD') {\n          break;\n        } // body data:\n        //   node, express, koa: req.body\n\n\n        if (req.body !== undefined) {\n          requestData.data = isString(req.body) ? req.body : JSON.stringify(normalize(req.body));\n        }\n\n        break;\n\n      default:\n        if ({}.hasOwnProperty.call(req, key)) {\n          requestData[key] = req[key];\n        }\n\n    }\n  });\n  return requestData;\n}","map":{"version":3,"sources":["../src/node.ts"],"names":[],"mappings":"AAGA,SAAS,QAAT,QAAyB,MAAzB;AACA,SAAS,SAAT,QAA0B,UAA1B;AAEA;;;;AAIG;;AACH,OAAM,SAAU,SAAV,GAAmB;AACvB,SAAO,MAAM,CAAC,SAAP,CAAiB,QAAjB,CAA0B,IAA1B,CAA+B,OAAO,OAAP,KAAmB,WAAnB,GAAiC,OAAjC,GAA2C,CAA1E,MAAiF,kBAAxF;AACD;AAED;;;;AAIG;AACH;;AACA,OAAM,SAAU,cAAV,CAAyB,GAAzB,EAAmC,OAAnC,EAAkD;AACtD;AACA,SAAO,GAAG,CAAC,OAAJ,CAAY,OAAZ,CAAP;AACD;AAED;;AACA,IAAM,oBAAoB,GAAG,CAAC,SAAD,EAAY,MAAZ,EAAoB,SAApB,EAA+B,QAA/B,EAAyC,cAAzC,EAAyD,KAAzD,CAA7B;AAEA;;;;;;;AAOG;;AACH,OAAM,SAAU,sBAAV,CACJ,GADI,EAEJ,IAFI,EAEiC;AAArC,MAAA,IAAA,KAAA,KAAA,CAAA,EAAA;AAAA,IAAA,IAAA,GAAA,oBAAA;AAAqC,GAAA,CAErC;;;AACA,MAAI,CAAC,SAAS,EAAd,EAAkB;AAChB,UAAM,IAAI,KAAJ,CAAU,2DAAV,CAAN;AACD;;AAED,MAAM,WAAW,GAA2B,EAA5C,CAPqC,CASrC;AACA;AACA;;AACA,MAAM,OAAO,GAAI,GAAG,CAAC,OAAJ,IAAe,GAAG,CAAC,MAAnB,IAA6B,EAA9C,CAZqC,CAgBrC;AACA;;AACA,MAAM,MAAM,GAAG,GAAG,CAAC,MAAnB,CAlBqC,CAmBrC;AACA;AACA;AACA;;AACA,MAAM,IAAI,GAAG,GAAG,CAAC,QAAJ,IAAgB,GAAG,CAAC,IAApB,IAA4B,OAAO,CAAC,IAApC,IAA4C,WAAzD,CAvBqC,CAwBrC;AACA;AACA;;AACA,MAAM,QAAQ,GACZ,GAAG,CAAC,QAAJ,KAAiB,OAAjB,IAA4B,GAAG,CAAC,MAAhC,IAA2C,CAAC,GAAG,CAAC,MAAJ,IAAc,EAAf,EAA+C,SAA1F,GACI,OADJ,GAEI,MAHN,CA3BqC,CA+BrC;AACA;AACA;;AACA,MAAM,WAAW,GAAI,GAAG,CAAC,WAAJ,IAAmB,GAAG,CAAC,GAAvB,IAA8B,EAAnD,CAlCqC,CAmCrC;;AACA,MAAM,WAAW,GAAM,QAAQ,GAAA,KAAR,GAAc,IAAd,GAAqB,WAA5C;AAEA,EAAA,IAAI,CAAC,OAAL,CAAa,UAAA,GAAA,EAAG;AACd,YAAQ,GAAR;AACE,WAAK,SAAL;AACE,QAAA,WAAW,CAAC,OAAZ,GAAsB,OAAtB;AACA;;AACF,WAAK,QAAL;AACE,QAAA,WAAW,CAAC,MAAZ,GAAqB,MAArB;AACA;;AACF,WAAK,KAAL;AACE,QAAA,WAAW,CAAC,GAAZ,GAAkB,WAAlB;AACA;;AACF,WAAK,SAAL;AACE;AACA;AACA;AACA;AACA,QAAA,WAAW,CAAC,OAAZ,GAAsB,GAAG,CAAC,OAAJ,IAAe,cAAc,CAAC,MAAD,EAAS,QAAT,CAAd,CAAiC,KAAjC,CAAuC,OAAO,CAAC,MAAR,IAAkB,EAAzD,CAArC;AACA;;AACF,WAAK,cAAL;AACE;AACA;AACA;AACA;AACA,QAAA,WAAW,CAAC,YAAZ,GAA2B,cAAc,CAAC,MAAD,EAAS,KAAT,CAAd,CAA8B,KAA9B,CAAoC,WAAW,IAAI,EAAnD,EAAuD,KAAvD,EAA8D,KAAzF;AACA;;AACF,WAAK,MAAL;AACE,YAAI,MAAM,KAAK,KAAX,IAAoB,MAAM,KAAK,MAAnC,EAA2C;AACzC;AACD,SAHH,CAIE;AACA;;;AACA,YAAI,GAAG,CAAC,IAAJ,KAAa,SAAjB,EAA4B;AAC1B,UAAA,WAAW,CAAC,IAAZ,GAAmB,QAAQ,CAAC,GAAG,CAAC,IAAL,CAAR,GAAqB,GAAG,CAAC,IAAzB,GAAgC,IAAI,CAAC,SAAL,CAAe,SAAS,CAAC,GAAG,CAAC,IAAL,CAAxB,CAAnD;AACD;;AACD;;AACF;AACE,YAAI,GAAG,cAAH,CAAkB,IAAlB,CAAuB,GAAvB,EAA4B,GAA5B,CAAJ,EAAsC;AACpC,UAAA,WAAW,CAAC,GAAD,CAAX,GAAoB,GAA8B,CAAC,GAAD,CAAlD;AACD;;AArCL;AAuCD,GAxCD;AA0CA,SAAO,WAAP;AACD","sourcesContent":["/* eslint-disable @typescript-eslint/no-explicit-any */\nimport { ExtractedNodeRequestData } from '@sentry/types';\n\nimport { isString } from './is';\nimport { normalize } from './object';\n\n/**\n * Checks whether we're in the Node.js or Browser environment\n *\n * @returns Answer to given question\n */\nexport function isNodeEnv(): boolean {\n  return Object.prototype.toString.call(typeof process !== 'undefined' ? process : 0) === '[object process]';\n}\n\n/**\n * Requires a module which is protected against bundler minification.\n *\n * @param request The module path to resolve\n */\n// eslint-disable-next-line @typescript-eslint/explicit-module-boundary-types\nexport function dynamicRequire(mod: any, request: string): any {\n  // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n  return mod.require(request);\n}\n\n/** Default request keys that'll be used to extract data from the request */\nconst DEFAULT_REQUEST_KEYS = ['cookies', 'data', 'headers', 'method', 'query_string', 'url'];\n\n/**\n * Normalizes data from the request object, accounting for framework differences.\n *\n * @param req The request object from which to extract data\n * @param keys An optional array of keys to include in the normalized data. Defaults to DEFAULT_REQUEST_KEYS if not\n * provided.\n * @returns An object containing normalized request data\n */\nexport function extractNodeRequestData(\n  req: { [key: string]: any },\n  keys: string[] = DEFAULT_REQUEST_KEYS,\n): ExtractedNodeRequestData {\n  // make sure we can safely use dynamicRequire below\n  if (!isNodeEnv()) {\n    throw new Error(\"Can't get node request data outside of a node environment\");\n  }\n\n  const requestData: { [key: string]: any } = {};\n\n  // headers:\n  //   node, express: req.headers\n  //   koa: req.header\n  const headers = (req.headers || req.header || {}) as {\n    host?: string;\n    cookie?: string;\n  };\n  // method:\n  //   node, express, koa: req.method\n  const method = req.method;\n  // host:\n  //   express: req.hostname in > 4 and req.host in < 4\n  //   koa: req.host\n  //   node: req.headers.host\n  const host = req.hostname || req.host || headers.host || '<no host>';\n  // protocol:\n  //   node: <n/a>\n  //   express, koa: req.protocol\n  const protocol =\n    req.protocol === 'https' || req.secure || ((req.socket || {}) as { encrypted?: boolean }).encrypted\n      ? 'https'\n      : 'http';\n  // url (including path and query string):\n  //   node, express: req.originalUrl\n  //   koa: req.url\n  const originalUrl = (req.originalUrl || req.url || '') as string;\n  // absolute url\n  const absoluteUrl = `${protocol}://${host}${originalUrl}`;\n\n  keys.forEach(key => {\n    switch (key) {\n      case 'headers':\n        requestData.headers = headers;\n        break;\n      case 'method':\n        requestData.method = method;\n        break;\n      case 'url':\n        requestData.url = absoluteUrl;\n        break;\n      case 'cookies':\n        // cookies:\n        //   node, express, koa: req.headers.cookie\n        //   vercel, sails.js, express (w/ cookie middleware): req.cookies\n        // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n        requestData.cookies = req.cookies || dynamicRequire(module, 'cookie').parse(headers.cookie || '');\n        break;\n      case 'query_string':\n        // query string:\n        //   node: req.url (raw)\n        //   express, koa: req.query\n        // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n        requestData.query_string = dynamicRequire(module, 'url').parse(originalUrl || '', false).query;\n        break;\n      case 'data':\n        if (method === 'GET' || method === 'HEAD') {\n          break;\n        }\n        // body data:\n        //   node, express, koa: req.body\n        if (req.body !== undefined) {\n          requestData.data = isString(req.body) ? req.body : JSON.stringify(normalize(req.body));\n        }\n        break;\n      default:\n        if ({}.hasOwnProperty.call(req, key)) {\n          requestData[key] = (req as { [key: string]: any })[key];\n        }\n    }\n  });\n\n  return requestData;\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}