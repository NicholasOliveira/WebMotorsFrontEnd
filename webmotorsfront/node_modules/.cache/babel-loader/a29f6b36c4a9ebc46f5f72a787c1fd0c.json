{"ast":null,"code":"import { addInstrumentationHandler, logger } from '@sentry/utils';\nimport { SpanStatus } from './spanstatus';\nimport { getActiveTransaction } from './utils';\n/**\n * Configures global error listeners\n */\n\nexport function registerErrorInstrumentation() {\n  addInstrumentationHandler({\n    callback: errorCallback,\n    type: 'error'\n  });\n  addInstrumentationHandler({\n    callback: errorCallback,\n    type: 'unhandledrejection'\n  });\n}\n/**\n * If an error or unhandled promise occurs, we mark the active transaction as failed\n */\n\nfunction errorCallback() {\n  var activeTransaction = getActiveTransaction();\n\n  if (activeTransaction) {\n    logger.log(\"[Tracing] Transaction: \" + SpanStatus.InternalError + \" -> Global error occured\");\n    activeTransaction.setStatus(SpanStatus.InternalError);\n  }\n}","map":{"version":3,"sources":["../src/errors.ts"],"names":[],"mappings":"AAAA,SAAS,yBAAT,EAAoC,MAApC,QAAkD,eAAlD;AAEA,SAAS,UAAT,QAA2B,cAA3B;AACA,SAAS,oBAAT,QAAqC,SAArC;AAEA;;AAEG;;AACH,OAAM,SAAU,4BAAV,GAAsC;AAC1C,EAAA,yBAAyB,CAAC;AACxB,IAAA,QAAQ,EAAE,aADc;AAExB,IAAA,IAAI,EAAE;AAFkB,GAAD,CAAzB;AAIA,EAAA,yBAAyB,CAAC;AACxB,IAAA,QAAQ,EAAE,aADc;AAExB,IAAA,IAAI,EAAE;AAFkB,GAAD,CAAzB;AAID;AAED;;AAEG;;AACH,SAAS,aAAT,GAAsB;AACpB,MAAM,iBAAiB,GAAG,oBAAoB,EAA9C;;AACA,MAAI,iBAAJ,EAAuB;AACrB,IAAA,MAAM,CAAC,GAAP,CAAW,4BAA0B,UAAU,CAAC,aAArC,GAAkD,0BAA7D;AACA,IAAA,iBAAiB,CAAC,SAAlB,CAA4B,UAAU,CAAC,aAAvC;AACD;AACF","sourcesContent":["import { addInstrumentationHandler, logger } from '@sentry/utils';\n\nimport { SpanStatus } from './spanstatus';\nimport { getActiveTransaction } from './utils';\n\n/**\n * Configures global error listeners\n */\nexport function registerErrorInstrumentation(): void {\n  addInstrumentationHandler({\n    callback: errorCallback,\n    type: 'error',\n  });\n  addInstrumentationHandler({\n    callback: errorCallback,\n    type: 'unhandledrejection',\n  });\n}\n\n/**\n * If an error or unhandled promise occurs, we mark the active transaction as failed\n */\nfunction errorCallback(): void {\n  const activeTransaction = getActiveTransaction();\n  if (activeTransaction) {\n    logger.log(`[Tracing] Transaction: ${SpanStatus.InternalError} -> Global error occured`);\n    activeTransaction.setStatus(SpanStatus.InternalError);\n  }\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}