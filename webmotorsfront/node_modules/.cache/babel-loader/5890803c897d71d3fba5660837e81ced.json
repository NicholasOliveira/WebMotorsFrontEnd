{"ast":null,"code":"import { __extends } from \"tslib\";\nimport { eventToSentryRequest, sessionToSentryRequest } from '@sentry/core';\nimport { getGlobalObject, supportsReferrerPolicy, SyncPromise } from '@sentry/utils';\nimport { BaseTransport } from './base';\nvar global = getGlobalObject();\n/** `fetch` based transport */\n\nvar FetchTransport =\n/** @class */\nfunction (_super) {\n  __extends(FetchTransport, _super);\n\n  function FetchTransport() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n  /**\n   * @inheritDoc\n   */\n\n\n  FetchTransport.prototype.sendEvent = function (event) {\n    return this._sendRequest(eventToSentryRequest(event, this._api), event);\n  };\n  /**\n   * @inheritDoc\n   */\n\n\n  FetchTransport.prototype.sendSession = function (session) {\n    return this._sendRequest(sessionToSentryRequest(session, this._api), session);\n  };\n  /**\n   * @param sentryRequest Prepared SentryRequest to be delivered\n   * @param originalPayload Original payload used to create SentryRequest\n   */\n\n\n  FetchTransport.prototype._sendRequest = function (sentryRequest, originalPayload) {\n    var _this = this;\n\n    if (this._isRateLimited(sentryRequest.type)) {\n      return Promise.reject({\n        event: originalPayload,\n        type: sentryRequest.type,\n        reason: \"Transport locked till \" + this._disabledUntil(sentryRequest.type) + \" due to too many requests.\",\n        status: 429\n      });\n    }\n\n    var options = {\n      body: sentryRequest.body,\n      method: 'POST',\n      // Despite all stars in the sky saying that Edge supports old draft syntax, aka 'never', 'always', 'origin' and 'default\n      // https://caniuse.com/#feat=referrer-policy\n      // It doesn't. And it throw exception instead of ignoring this parameter...\n      // REF: https://github.com/getsentry/raven-js/issues/1233\n      referrerPolicy: supportsReferrerPolicy() ? 'origin' : ''\n    };\n\n    if (this.options.fetchParameters !== undefined) {\n      Object.assign(options, this.options.fetchParameters);\n    }\n\n    if (this.options.headers !== undefined) {\n      options.headers = this.options.headers;\n    }\n\n    return this._buffer.add(new SyncPromise(function (resolve, reject) {\n      global.fetch(sentryRequest.url, options).then(function (response) {\n        var headers = {\n          'x-sentry-rate-limits': response.headers.get('X-Sentry-Rate-Limits'),\n          'retry-after': response.headers.get('Retry-After')\n        };\n\n        _this._handleResponse({\n          requestType: sentryRequest.type,\n          response: response,\n          headers: headers,\n          resolve: resolve,\n          reject: reject\n        });\n      }).catch(reject);\n    }));\n  };\n\n  return FetchTransport;\n}(BaseTransport);\n\nexport { FetchTransport };","map":{"version":3,"sources":["../../src/transports/fetch.ts"],"names":[],"mappings":";AAAA,SAAS,oBAAT,EAA+B,sBAA/B,QAA6D,cAA7D;AAEA,SAAS,eAAT,EAA0B,sBAA1B,EAAkD,WAAlD,QAAqE,eAArE;AAEA,SAAS,aAAT,QAA8B,QAA9B;AAEA,IAAM,MAAM,GAAG,eAAe,EAA9B;AAEA;;AACA,IAAA,cAAA;AAAA;AAAA,UAAA,MAAA,EAAA;AAAoC,EAAA,SAAA,CAAA,cAAA,EAAA,MAAA,CAAA;;AAApC,WAAA,cAAA,GAAA;;AA4DC;AA3DC;;AAEG;;;AACI,EAAA,cAAA,CAAA,SAAA,CAAA,SAAA,GAAP,UAAiB,KAAjB,EAA6B;AAC3B,WAAO,KAAK,YAAL,CAAkB,oBAAoB,CAAC,KAAD,EAAQ,KAAK,IAAb,CAAtC,EAA0D,KAA1D,CAAP;AACD,GAFM;AAIP;;AAEG;;;AACI,EAAA,cAAA,CAAA,SAAA,CAAA,WAAA,GAAP,UAAmB,OAAnB,EAAmC;AACjC,WAAO,KAAK,YAAL,CAAkB,sBAAsB,CAAC,OAAD,EAAU,KAAK,IAAf,CAAxC,EAA8D,OAA9D,CAAP;AACD,GAFM;AAIP;;;AAGG;;;AACK,EAAA,cAAA,CAAA,SAAA,CAAA,YAAA,GAAR,UAAqB,aAArB,EAAmD,eAAnD,EAAmF;AAAnF,QAAA,KAAA,GAAA,IAAA;;AACE,QAAI,KAAK,cAAL,CAAoB,aAAa,CAAC,IAAlC,CAAJ,EAA6C;AAC3C,aAAO,OAAO,CAAC,MAAR,CAAe;AACpB,QAAA,KAAK,EAAE,eADa;AAEpB,QAAA,IAAI,EAAE,aAAa,CAAC,IAFA;AAGpB,QAAA,MAAM,EAAE,2BAAyB,KAAK,cAAL,CAAoB,aAAa,CAAC,IAAlC,CAAzB,GAAgE,4BAHpD;AAIpB,QAAA,MAAM,EAAE;AAJY,OAAf,CAAP;AAMD;;AAED,QAAM,OAAO,GAAgB;AAC3B,MAAA,IAAI,EAAE,aAAa,CAAC,IADO;AAE3B,MAAA,MAAM,EAAE,MAFmB;AAG3B;AACA;AACA;AACA;AACA,MAAA,cAAc,EAAG,sBAAsB,KAAK,QAAL,GAAgB;AAP5B,KAA7B;;AASA,QAAI,KAAK,OAAL,CAAa,eAAb,KAAiC,SAArC,EAAgD;AAC9C,MAAA,MAAM,CAAC,MAAP,CAAc,OAAd,EAAuB,KAAK,OAAL,CAAa,eAApC;AACD;;AACD,QAAI,KAAK,OAAL,CAAa,OAAb,KAAyB,SAA7B,EAAwC;AACtC,MAAA,OAAO,CAAC,OAAR,GAAkB,KAAK,OAAL,CAAa,OAA/B;AACD;;AAED,WAAO,KAAK,OAAL,CAAa,GAAb,CACL,IAAI,WAAJ,CAA0B,UAAC,OAAD,EAAU,MAAV,EAAgB;AACxC,MAAA,MAAM,CACH,KADH,CACS,aAAa,CAAC,GADvB,EAC4B,OAD5B,EAEG,IAFH,CAEQ,UAAA,QAAA,EAAQ;AACZ,YAAM,OAAO,GAAG;AACd,kCAAwB,QAAQ,CAAC,OAAT,CAAiB,GAAjB,CAAqB,sBAArB,CADV;AAEd,yBAAe,QAAQ,CAAC,OAAT,CAAiB,GAAjB,CAAqB,aAArB;AAFD,SAAhB;;AAIA,QAAA,KAAI,CAAC,eAAL,CAAqB;AAAE,UAAA,WAAW,EAAE,aAAa,CAAC,IAA7B;AAAmC,UAAA,QAAQ,EAAA,QAA3C;AAA6C,UAAA,OAAO,EAAA,OAApD;AAAsD,UAAA,OAAO,EAAA,OAA7D;AAA+D,UAAA,MAAM,EAAA;AAArE,SAArB;AACD,OARH,EASG,KATH,CASS,MATT;AAUD,KAXD,CADK,CAAP;AAcD,GAxCO;;AAyCV,SAAA,cAAA;AAAC,CA5DD,CAAoC,aAApC,CAAA","sourcesContent":["import { eventToSentryRequest, sessionToSentryRequest } from '@sentry/core';\nimport { Event, Response, SentryRequest, Session } from '@sentry/types';\nimport { getGlobalObject, supportsReferrerPolicy, SyncPromise } from '@sentry/utils';\n\nimport { BaseTransport } from './base';\n\nconst global = getGlobalObject<Window>();\n\n/** `fetch` based transport */\nexport class FetchTransport extends BaseTransport {\n  /**\n   * @inheritDoc\n   */\n  public sendEvent(event: Event): PromiseLike<Response> {\n    return this._sendRequest(eventToSentryRequest(event, this._api), event);\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public sendSession(session: Session): PromiseLike<Response> {\n    return this._sendRequest(sessionToSentryRequest(session, this._api), session);\n  }\n\n  /**\n   * @param sentryRequest Prepared SentryRequest to be delivered\n   * @param originalPayload Original payload used to create SentryRequest\n   */\n  private _sendRequest(sentryRequest: SentryRequest, originalPayload: Event | Session): PromiseLike<Response> {\n    if (this._isRateLimited(sentryRequest.type)) {\n      return Promise.reject({\n        event: originalPayload,\n        type: sentryRequest.type,\n        reason: `Transport locked till ${this._disabledUntil(sentryRequest.type)} due to too many requests.`,\n        status: 429,\n      });\n    }\n\n    const options: RequestInit = {\n      body: sentryRequest.body,\n      method: 'POST',\n      // Despite all stars in the sky saying that Edge supports old draft syntax, aka 'never', 'always', 'origin' and 'default\n      // https://caniuse.com/#feat=referrer-policy\n      // It doesn't. And it throw exception instead of ignoring this parameter...\n      // REF: https://github.com/getsentry/raven-js/issues/1233\n      referrerPolicy: (supportsReferrerPolicy() ? 'origin' : '') as ReferrerPolicy,\n    };\n    if (this.options.fetchParameters !== undefined) {\n      Object.assign(options, this.options.fetchParameters);\n    }\n    if (this.options.headers !== undefined) {\n      options.headers = this.options.headers;\n    }\n\n    return this._buffer.add(\n      new SyncPromise<Response>((resolve, reject) => {\n        global\n          .fetch(sentryRequest.url, options)\n          .then(response => {\n            const headers = {\n              'x-sentry-rate-limits': response.headers.get('X-Sentry-Rate-Limits'),\n              'retry-after': response.headers.get('Retry-After'),\n            };\n            this._handleResponse({ requestType: sentryRequest.type, response, headers, resolve, reject });\n          })\n          .catch(reject);\n      }),\n    );\n  }\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}