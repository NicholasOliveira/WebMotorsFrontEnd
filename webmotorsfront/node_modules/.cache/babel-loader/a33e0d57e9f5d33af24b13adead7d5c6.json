{"ast":null,"code":"/*\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar inputPromise;\nexport var whenInput = function () {\n  if (!inputPromise) {\n    inputPromise = new Promise(function (r) {\n      return ['scroll', 'keydown', 'pointerdown'].map(function (type) {\n        addEventListener(type, r, {\n          once: true,\n          passive: true,\n          capture: true\n        });\n      });\n    });\n  }\n\n  return inputPromise;\n};","map":{"version":3,"sources":["../../../../src/browser/web-vitals/lib/whenInput.ts"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;AAcG;AAEH,IAAI,YAAJ;AAEA,OAAO,IAAM,SAAS,GAAG,YAAA;AACvB,MAAI,CAAC,YAAL,EAAmB;AACjB,IAAA,YAAY,GAAG,IAAI,OAAJ,CAAY,UAAA,CAAA,EAAC;AAC1B,aAAO,CAAC,QAAD,EAAW,SAAX,EAAsB,aAAtB,EAAqC,GAArC,CAAyC,UAAA,IAAA,EAAI;AAClD,QAAA,gBAAgB,CAAC,IAAD,EAAO,CAAP,EAAU;AACxB,UAAA,IAAI,EAAE,IADkB;AAExB,UAAA,OAAO,EAAE,IAFe;AAGxB,UAAA,OAAO,EAAE;AAHe,SAAV,CAAhB;AAKD,OANM,CAAP;AAOD,KARc,CAAf;AASD;;AACD,SAAO,YAAP;AACD,CAbM","sourcesContent":["/*\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nlet inputPromise: Promise<Event>;\n\nexport const whenInput = (): Promise<Event> => {\n  if (!inputPromise) {\n    inputPromise = new Promise(r => {\n      return ['scroll', 'keydown', 'pointerdown'].map(type => {\n        addEventListener(type, r, {\n          once: true,\n          passive: true,\n          capture: true,\n        });\n      });\n    });\n  }\n  return inputPromise;\n};\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}