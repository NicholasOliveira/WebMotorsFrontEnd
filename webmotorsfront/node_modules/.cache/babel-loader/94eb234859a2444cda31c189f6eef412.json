{"ast":null,"code":"import { getCurrentHub } from '@sentry/hub';\nexport var TRACEPARENT_REGEXP = new RegExp('^[ \\\\t]*' + // whitespace\n'([0-9a-f]{32})?' + // trace_id\n'-?([0-9a-f]{16})?' + // span_id\n'-?([01])?' + // sampled\n'[ \\\\t]*$');\n/**\n * Determines if tracing is currently enabled.\n *\n * Tracing is enabled when at least one of `tracesSampleRate` and `tracesSampler` is defined in the SDK config.\n */\n\nexport function hasTracingEnabled(options) {\n  return 'tracesSampleRate' in options || 'tracesSampler' in options;\n}\n/**\n * Extract transaction context data from a `sentry-trace` header.\n *\n * @param traceparent Traceparent string\n *\n * @returns Object containing data from the header, or undefined if traceparent string is malformed\n */\n\nexport function extractTraceparentData(traceparent) {\n  var matches = traceparent.match(TRACEPARENT_REGEXP);\n\n  if (matches) {\n    var parentSampled = void 0;\n\n    if (matches[3] === '1') {\n      parentSampled = true;\n    } else if (matches[3] === '0') {\n      parentSampled = false;\n    }\n\n    return {\n      traceId: matches[1],\n      parentSampled: parentSampled,\n      parentSpanId: matches[2]\n    };\n  }\n\n  return undefined;\n}\n/** Grabs active transaction off scope, if any */\n\nexport function getActiveTransaction(hub) {\n  if (hub === void 0) {\n    hub = getCurrentHub();\n  }\n\n  var _a, _b;\n\n  return (_b = (_a = hub) === null || _a === void 0 ? void 0 : _a.getScope()) === null || _b === void 0 ? void 0 : _b.getTransaction();\n}\n/**\n * Converts from milliseconds to seconds\n * @param time time in ms\n */\n\nexport function msToSec(time) {\n  return time / 1000;\n}\n/**\n * Converts from seconds to milliseconds\n * @param time time in seconds\n */\n\nexport function secToMs(time) {\n  return time * 1000;\n} // so it can be used in manual instrumentation without necessitating a hard dependency on @sentry/utils\n\nexport { stripUrlQueryAndFragment } from '@sentry/utils';","map":{"version":3,"sources":["../src/utils.ts"],"names":[],"mappings":"AAAA,SAAS,aAAT,QAAmC,aAAnC;AAGA,OAAO,IAAM,kBAAkB,GAAG,IAAI,MAAJ,CAChC,aAAa;AACb,iBADA,GACoB;AACpB,mBAFA,GAEsB;AACtB,WAHA,GAGc;AACZ,UAL8B,CAA3B;AAQP;;;;AAIG;;AACH,OAAM,SAAU,iBAAV,CAA4B,OAA5B,EAA4C;AAChD,SAAO,sBAAsB,OAAtB,IAAiC,mBAAmB,OAA3D;AACD;AAED;;;;;;AAMG;;AACH,OAAM,SAAU,sBAAV,CAAiC,WAAjC,EAAoD;AACxD,MAAM,OAAO,GAAG,WAAW,CAAC,KAAZ,CAAkB,kBAAlB,CAAhB;;AACA,MAAI,OAAJ,EAAa;AACX,QAAI,aAAa,GAAA,KAAA,CAAjB;;AACA,QAAI,OAAO,CAAC,CAAD,CAAP,KAAe,GAAnB,EAAwB;AACtB,MAAA,aAAa,GAAG,IAAhB;AACD,KAFD,MAEO,IAAI,OAAO,CAAC,CAAD,CAAP,KAAe,GAAnB,EAAwB;AAC7B,MAAA,aAAa,GAAG,KAAhB;AACD;;AACD,WAAO;AACL,MAAA,OAAO,EAAE,OAAO,CAAC,CAAD,CADX;AAEL,MAAA,aAAa,EAAA,aAFR;AAGL,MAAA,YAAY,EAAE,OAAO,CAAC,CAAD;AAHhB,KAAP;AAKD;;AACD,SAAO,SAAP;AACD;AAED;;AACA,OAAM,SAAU,oBAAV,CAAsD,GAAtD,EAAgF;AAA1B,MAAA,GAAA,KAAA,KAAA,CAAA,EAAA;AAAA,IAAA,GAAA,GAAW,aAAa,EAAxB;AAA0B;;;;AACpF,SAAO,CAAA,EAAA,GAAA,CAAA,EAAA,GAAA,GAAA,MAAG,IAAH,IAAG,EAAA,KAAA,KAAA,CAAH,GAAG,KAAA,CAAH,GAAG,EAAA,CAAE,QAAF,EAAH,MAAa,IAAb,IAAa,EAAA,KAAA,KAAA,CAAb,GAAa,KAAA,CAAb,GAAa,EAAA,CAAI,cAAJ,EAApB;AACD;AAED;;;AAGG;;AACH,OAAM,SAAU,OAAV,CAAkB,IAAlB,EAA8B;AAClC,SAAO,IAAI,GAAG,IAAd;AACD;AAED;;;AAGG;;AACH,OAAM,SAAU,OAAV,CAAkB,IAAlB,EAA8B;AAClC,SAAO,IAAI,GAAG,IAAd;AACD,C,CAED;;AACA,SAAS,wBAAT,QAAyC,eAAzC","sourcesContent":["import { getCurrentHub, Hub } from '@sentry/hub';\nimport { Options, TraceparentData, Transaction } from '@sentry/types';\n\nexport const TRACEPARENT_REGEXP = new RegExp(\n  '^[ \\\\t]*' + // whitespace\n  '([0-9a-f]{32})?' + // trace_id\n  '-?([0-9a-f]{16})?' + // span_id\n  '-?([01])?' + // sampled\n    '[ \\\\t]*$', // whitespace\n);\n\n/**\n * Determines if tracing is currently enabled.\n *\n * Tracing is enabled when at least one of `tracesSampleRate` and `tracesSampler` is defined in the SDK config.\n */\nexport function hasTracingEnabled(options: Options): boolean {\n  return 'tracesSampleRate' in options || 'tracesSampler' in options;\n}\n\n/**\n * Extract transaction context data from a `sentry-trace` header.\n *\n * @param traceparent Traceparent string\n *\n * @returns Object containing data from the header, or undefined if traceparent string is malformed\n */\nexport function extractTraceparentData(traceparent: string): TraceparentData | undefined {\n  const matches = traceparent.match(TRACEPARENT_REGEXP);\n  if (matches) {\n    let parentSampled: boolean | undefined;\n    if (matches[3] === '1') {\n      parentSampled = true;\n    } else if (matches[3] === '0') {\n      parentSampled = false;\n    }\n    return {\n      traceId: matches[1],\n      parentSampled,\n      parentSpanId: matches[2],\n    };\n  }\n  return undefined;\n}\n\n/** Grabs active transaction off scope, if any */\nexport function getActiveTransaction<T extends Transaction>(hub: Hub = getCurrentHub()): T | undefined {\n  return hub?.getScope()?.getTransaction() as T | undefined;\n}\n\n/**\n * Converts from milliseconds to seconds\n * @param time time in ms\n */\nexport function msToSec(time: number): number {\n  return time / 1000;\n}\n\n/**\n * Converts from seconds to milliseconds\n * @param time time in seconds\n */\nexport function secToMs(time: number): number {\n  return time * 1000;\n}\n\n// so it can be used in manual instrumentation without necessitating a hard dependency on @sentry/utils\nexport { stripUrlQueryAndFragment } from '@sentry/utils';\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}