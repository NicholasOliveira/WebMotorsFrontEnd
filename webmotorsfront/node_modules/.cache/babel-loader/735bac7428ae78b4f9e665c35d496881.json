{"ast":null,"code":"import { __assign } from \"tslib\";\nimport { getActiveDomain, getMainCarrier } from '@sentry/hub';\nimport { dynamicRequire, extractNodeRequestData, getGlobalObject, isInstanceOf, isNodeEnv, logger } from '@sentry/utils';\nimport { registerErrorInstrumentation } from './errors';\nimport { IdleTransaction } from './idletransaction';\nimport { Transaction } from './transaction';\nimport { hasTracingEnabled } from './utils';\n/** Returns all trace headers that are currently on the top scope. */\n\nfunction traceHeaders() {\n  var scope = this.getScope();\n\n  if (scope) {\n    var span = scope.getSpan();\n\n    if (span) {\n      return {\n        'sentry-trace': span.toTraceparent()\n      };\n    }\n  }\n\n  return {};\n}\n/**\n * Implements sampling inheritance and falls back to user-provided static rate if no parent decision is available.\n *\n * @param parentSampled: The parent transaction's sampling decision, if any.\n * @param givenRate: The rate to use if no parental decision is available.\n *\n * @returns The parent's sampling decision (if one exists), or the provided static rate\n */\n\n\nfunction _inheritOrUseGivenRate(parentSampled, givenRate) {\n  return parentSampled !== undefined ? parentSampled : givenRate;\n}\n/**\n * Makes a sampling decision for the given transaction and stores it on the transaction.\n *\n * Called every time a transaction is created. Only transactions which emerge with a `sampled` value of `true` will be\n * sent to Sentry.\n *\n * @param hub: The hub off of which to read config options\n * @param transaction: The transaction needing a sampling decision\n * @param samplingContext: Default and user-provided data which may be used to help make the decision\n *\n * @returns The given transaction with its `sampled` value set\n */\n\n\nfunction sample(hub, transaction, samplingContext) {\n  var _a;\n\n  var client = hub.getClient();\n  var options = client && client.getOptions() || {}; // nothing to do if there's no client or if tracing is disabled\n\n  if (!client || !hasTracingEnabled(options)) {\n    transaction.sampled = false;\n    return transaction;\n  } // if the user has forced a sampling decision by passing a `sampled` value in their transaction context, go with that\n\n\n  if (transaction.sampled !== undefined) {\n    return transaction;\n  } // we would have bailed already if neither `tracesSampler` nor `tracesSampleRate` were defined, so one of these should\n  // work; prefer the hook if so\n\n\n  var sampleRate = typeof options.tracesSampler === 'function' ? options.tracesSampler(samplingContext) : _inheritOrUseGivenRate(samplingContext.parentSampled, options.tracesSampleRate); // Since this is coming from the user (or from a function provided by the user), who knows what we might get. (The\n  // only valid values are booleans or numbers between 0 and 1.)\n\n  if (!isValidSampleRate(sampleRate)) {\n    logger.warn(\"[Tracing] Discarding transaction because of invalid sample rate.\");\n    transaction.sampled = false;\n    return transaction;\n  } // if the function returned 0 (or false), or if `tracesSampleRate` is 0, it's a sign the transaction should be dropped\n\n\n  if (!sampleRate) {\n    logger.log(\"[Tracing] Discarding transaction because \" + (typeof options.tracesSampler === 'function' ? 'tracesSampler returned 0 or false' : 'tracesSampleRate is set to 0'));\n    transaction.sampled = false;\n    return transaction;\n  } // Now we roll the dice. Math.random is inclusive of 0, but not of 1, so strict < is safe here. In case sampleRate is\n  // a boolean, the < comparison will cause it to be automatically cast to 1 if it's true and 0 if it's false.\n\n\n  transaction.sampled = Math.random() < sampleRate; // if we're not going to keep it, we're done\n\n  if (!transaction.sampled) {\n    logger.log(\"[Tracing] Discarding transaction because it's not included in the random sample (sampling rate = \" + Number(sampleRate) + \")\");\n    return transaction;\n  } // at this point we know we're keeping the transaction, whether because of an inherited decision or because it got\n  // lucky with the dice roll\n\n\n  transaction.initSpanRecorder((_a = options._experiments) === null || _a === void 0 ? void 0 : _a.maxSpans);\n  logger.log(\"[Tracing] starting \" + transaction.op + \" transaction - \" + transaction.name);\n  return transaction;\n}\n/**\n * Gets the correct context to pass to the tracesSampler, based on the environment (i.e., which SDK is being used)\n *\n * @returns The default sample context\n */\n\n\nfunction getDefaultSamplingContext(transactionContext) {\n  // promote parent sampling decision (if any) for easy access\n  var parentSampled = transactionContext.parentSampled;\n  var defaultSamplingContext = {\n    transactionContext: transactionContext,\n    parentSampled: parentSampled\n  };\n\n  if (isNodeEnv()) {\n    var domain = getActiveDomain();\n\n    if (domain) {\n      // for all node servers that we currently support, we store the incoming request object (which is an instance of\n      // http.IncomingMessage) on the domain\n      // the domain members are stored as an array, so our only way to find the request is to iterate through the array\n      // and compare types\n      var nodeHttpModule = dynamicRequire(module, 'http'); // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n\n      var requestType_1 = nodeHttpModule.IncomingMessage;\n      var request = domain.members.find(function (member) {\n        return isInstanceOf(member, requestType_1);\n      });\n\n      if (request) {\n        defaultSamplingContext.request = extractNodeRequestData(request);\n      }\n    }\n  } // we must be in browser-js (or some derivative thereof)\n  else {\n      // we use `getGlobalObject()` rather than `window` since service workers also have a `location` property on `self`\n      var globalObject = getGlobalObject();\n\n      if ('location' in globalObject) {\n        // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access, @typescript-eslint/no-explicit-any\n        defaultSamplingContext.location = __assign({}, globalObject.location);\n      }\n    }\n\n  return defaultSamplingContext;\n}\n/**\n * Checks the given sample rate to make sure it is valid type and value (a boolean, or a number between 0 and 1).\n */\n\n\nfunction isValidSampleRate(rate) {\n  // we need to check NaN explicitly because it's of type 'number' and therefore wouldn't get caught by this typecheck\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  if (isNaN(rate) || !(typeof rate === 'number' || typeof rate === 'boolean')) {\n    logger.warn(\"[Tracing] Given sample rate is invalid. Sample rate must be a boolean or a number between 0 and 1. Got \" + JSON.stringify(rate) + \" of type \" + JSON.stringify(typeof rate) + \".\");\n    return false;\n  } // in case sampleRate is a boolean, it will get automatically cast to 1 if it's true and 0 if it's false\n\n\n  if (rate < 0 || rate > 1) {\n    logger.warn(\"[Tracing] Given sample rate is invalid. Sample rate must be between 0 and 1. Got \" + rate + \".\");\n    return false;\n  }\n\n  return true;\n}\n/**\n * Creates a new transaction and adds a sampling decision if it doesn't yet have one.\n *\n * The Hub.startTransaction method delegates to this method to do its work, passing the Hub instance in as `this`, as if\n * it had been called on the hub directly. Exists as a separate function so that it can be injected into the class as an\n * \"extension method.\"\n *\n * @param this: The Hub starting the transaction\n * @param transactionContext: Data used to configure the transaction\n * @param CustomSamplingContext: Optional data to be provided to the `tracesSampler` function (if any)\n *\n * @returns The new transaction\n *\n * @see {@link Hub.startTransaction}\n */\n\n\nfunction _startTransaction(transactionContext, customSamplingContext) {\n  var transaction = new Transaction(transactionContext, this);\n  return sample(this, transaction, __assign(__assign({}, getDefaultSamplingContext(transactionContext)), customSamplingContext));\n}\n/**\n * Create new idle transaction.\n */\n\n\nexport function startIdleTransaction(hub, transactionContext, idleTimeout, onScope) {\n  var transaction = new IdleTransaction(transactionContext, hub, idleTimeout, onScope);\n  return sample(hub, transaction, getDefaultSamplingContext(transactionContext));\n}\n/**\n * @private\n */\n\nexport function _addTracingExtensions() {\n  var carrier = getMainCarrier();\n\n  if (carrier.__SENTRY__) {\n    carrier.__SENTRY__.extensions = carrier.__SENTRY__.extensions || {};\n\n    if (!carrier.__SENTRY__.extensions.startTransaction) {\n      carrier.__SENTRY__.extensions.startTransaction = _startTransaction;\n    }\n\n    if (!carrier.__SENTRY__.extensions.traceHeaders) {\n      carrier.__SENTRY__.extensions.traceHeaders = traceHeaders;\n    }\n  }\n}\n/**\n * This patches the global object and injects the Tracing extensions methods\n */\n\nexport function addExtensionMethods() {\n  _addTracingExtensions(); // If an error happens globally, we should make sure transaction status is set to error.\n\n\n  registerErrorInstrumentation();\n}","map":{"version":3,"sources":["../src/hubextensions.ts"],"names":[],"mappings":"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","sourcesContent":["import { getActiveDomain, getMainCarrier, Hub } from '@sentry/hub';\nimport { CustomSamplingContext, SamplingContext, TransactionContext } from '@sentry/types';\nimport {\n  dynamicRequire,\n  extractNodeRequestData,\n  getGlobalObject,\n  isInstanceOf,\n  isNodeEnv,\n  logger,\n} from '@sentry/utils';\n\nimport { registerErrorInstrumentation } from './errors';\nimport { IdleTransaction } from './idletransaction';\nimport { Transaction } from './transaction';\nimport { hasTracingEnabled } from './utils';\n\n/** Returns all trace headers that are currently on the top scope. */\nfunction traceHeaders(this: Hub): { [key: string]: string } {\n  const scope = this.getScope();\n  if (scope) {\n    const span = scope.getSpan();\n    if (span) {\n      return {\n        'sentry-trace': span.toTraceparent(),\n      };\n    }\n  }\n  return {};\n}\n\n/**\n * Implements sampling inheritance and falls back to user-provided static rate if no parent decision is available.\n *\n * @param parentSampled: The parent transaction's sampling decision, if any.\n * @param givenRate: The rate to use if no parental decision is available.\n *\n * @returns The parent's sampling decision (if one exists), or the provided static rate\n */\nfunction _inheritOrUseGivenRate(parentSampled: boolean | undefined, givenRate: unknown): boolean | unknown {\n  return parentSampled !== undefined ? parentSampled : givenRate;\n}\n\n/**\n * Makes a sampling decision for the given transaction and stores it on the transaction.\n *\n * Called every time a transaction is created. Only transactions which emerge with a `sampled` value of `true` will be\n * sent to Sentry.\n *\n * @param hub: The hub off of which to read config options\n * @param transaction: The transaction needing a sampling decision\n * @param samplingContext: Default and user-provided data which may be used to help make the decision\n *\n * @returns The given transaction with its `sampled` value set\n */\nfunction sample<T extends Transaction>(hub: Hub, transaction: T, samplingContext: SamplingContext): T {\n  const client = hub.getClient();\n  const options = (client && client.getOptions()) || {};\n\n  // nothing to do if there's no client or if tracing is disabled\n  if (!client || !hasTracingEnabled(options)) {\n    transaction.sampled = false;\n    return transaction;\n  }\n\n  // if the user has forced a sampling decision by passing a `sampled` value in their transaction context, go with that\n  if (transaction.sampled !== undefined) {\n    return transaction;\n  }\n\n  // we would have bailed already if neither `tracesSampler` nor `tracesSampleRate` were defined, so one of these should\n  // work; prefer the hook if so\n  const sampleRate =\n    typeof options.tracesSampler === 'function'\n      ? options.tracesSampler(samplingContext)\n      : _inheritOrUseGivenRate(samplingContext.parentSampled, options.tracesSampleRate);\n\n  // Since this is coming from the user (or from a function provided by the user), who knows what we might get. (The\n  // only valid values are booleans or numbers between 0 and 1.)\n  if (!isValidSampleRate(sampleRate)) {\n    logger.warn(`[Tracing] Discarding transaction because of invalid sample rate.`);\n    transaction.sampled = false;\n    return transaction;\n  }\n\n  // if the function returned 0 (or false), or if `tracesSampleRate` is 0, it's a sign the transaction should be dropped\n  if (!sampleRate) {\n    logger.log(\n      `[Tracing] Discarding transaction because ${\n        typeof options.tracesSampler === 'function'\n          ? 'tracesSampler returned 0 or false'\n          : 'tracesSampleRate is set to 0'\n      }`,\n    );\n    transaction.sampled = false;\n    return transaction;\n  }\n\n  // Now we roll the dice. Math.random is inclusive of 0, but not of 1, so strict < is safe here. In case sampleRate is\n  // a boolean, the < comparison will cause it to be automatically cast to 1 if it's true and 0 if it's false.\n  transaction.sampled = Math.random() < (sampleRate as number | boolean);\n\n  // if we're not going to keep it, we're done\n  if (!transaction.sampled) {\n    logger.log(\n      `[Tracing] Discarding transaction because it's not included in the random sample (sampling rate = ${Number(\n        sampleRate,\n      )})`,\n    );\n    return transaction;\n  }\n\n  // at this point we know we're keeping the transaction, whether because of an inherited decision or because it got\n  // lucky with the dice roll\n  transaction.initSpanRecorder(options._experiments?.maxSpans as number);\n\n  logger.log(`[Tracing] starting ${transaction.op} transaction - ${transaction.name}`);\n  return transaction;\n}\n/**\n * Gets the correct context to pass to the tracesSampler, based on the environment (i.e., which SDK is being used)\n *\n * @returns The default sample context\n */\nfunction getDefaultSamplingContext(transactionContext: TransactionContext): SamplingContext {\n  // promote parent sampling decision (if any) for easy access\n  const { parentSampled } = transactionContext;\n  const defaultSamplingContext: SamplingContext = { transactionContext, parentSampled };\n\n  if (isNodeEnv()) {\n    const domain = getActiveDomain();\n\n    if (domain) {\n      // for all node servers that we currently support, we store the incoming request object (which is an instance of\n      // http.IncomingMessage) on the domain\n\n      // the domain members are stored as an array, so our only way to find the request is to iterate through the array\n      // and compare types\n\n      const nodeHttpModule = dynamicRequire(module, 'http');\n      // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n      const requestType = nodeHttpModule.IncomingMessage;\n\n      const request = domain.members.find(member => isInstanceOf(member, requestType));\n      if (request) {\n        defaultSamplingContext.request = extractNodeRequestData(request);\n      }\n    }\n  }\n\n  // we must be in browser-js (or some derivative thereof)\n  else {\n    // we use `getGlobalObject()` rather than `window` since service workers also have a `location` property on `self`\n    const globalObject = getGlobalObject<WindowOrWorkerGlobalScope>();\n\n    if ('location' in globalObject) {\n      // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access, @typescript-eslint/no-explicit-any\n      defaultSamplingContext.location = { ...(globalObject as any).location };\n    }\n  }\n\n  return defaultSamplingContext;\n}\n\n/**\n * Checks the given sample rate to make sure it is valid type and value (a boolean, or a number between 0 and 1).\n */\nfunction isValidSampleRate(rate: unknown): boolean {\n  // we need to check NaN explicitly because it's of type 'number' and therefore wouldn't get caught by this typecheck\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  if (isNaN(rate as any) || !(typeof rate === 'number' || typeof rate === 'boolean')) {\n    logger.warn(\n      `[Tracing] Given sample rate is invalid. Sample rate must be a boolean or a number between 0 and 1. Got ${JSON.stringify(\n        rate,\n      )} of type ${JSON.stringify(typeof rate)}.`,\n    );\n    return false;\n  }\n\n  // in case sampleRate is a boolean, it will get automatically cast to 1 if it's true and 0 if it's false\n  if (rate < 0 || rate > 1) {\n    logger.warn(`[Tracing] Given sample rate is invalid. Sample rate must be between 0 and 1. Got ${rate}.`);\n    return false;\n  }\n  return true;\n}\n\n/**\n * Creates a new transaction and adds a sampling decision if it doesn't yet have one.\n *\n * The Hub.startTransaction method delegates to this method to do its work, passing the Hub instance in as `this`, as if\n * it had been called on the hub directly. Exists as a separate function so that it can be injected into the class as an\n * \"extension method.\"\n *\n * @param this: The Hub starting the transaction\n * @param transactionContext: Data used to configure the transaction\n * @param CustomSamplingContext: Optional data to be provided to the `tracesSampler` function (if any)\n *\n * @returns The new transaction\n *\n * @see {@link Hub.startTransaction}\n */\nfunction _startTransaction(\n  this: Hub,\n  transactionContext: TransactionContext,\n  customSamplingContext?: CustomSamplingContext,\n): Transaction {\n  const transaction = new Transaction(transactionContext, this);\n  return sample(this, transaction, {\n    ...getDefaultSamplingContext(transactionContext),\n    ...customSamplingContext,\n  });\n}\n\n/**\n * Create new idle transaction.\n */\nexport function startIdleTransaction(\n  hub: Hub,\n  transactionContext: TransactionContext,\n  idleTimeout?: number,\n  onScope?: boolean,\n): IdleTransaction {\n  const transaction = new IdleTransaction(transactionContext, hub, idleTimeout, onScope);\n  return sample(hub, transaction, getDefaultSamplingContext(transactionContext));\n}\n\n/**\n * @private\n */\nexport function _addTracingExtensions(): void {\n  const carrier = getMainCarrier();\n  if (carrier.__SENTRY__) {\n    carrier.__SENTRY__.extensions = carrier.__SENTRY__.extensions || {};\n    if (!carrier.__SENTRY__.extensions.startTransaction) {\n      carrier.__SENTRY__.extensions.startTransaction = _startTransaction;\n    }\n    if (!carrier.__SENTRY__.extensions.traceHeaders) {\n      carrier.__SENTRY__.extensions.traceHeaders = traceHeaders;\n    }\n  }\n}\n\n/**\n * This patches the global object and injects the Tracing extensions methods\n */\nexport function addExtensionMethods(): void {\n  _addTracingExtensions();\n\n  // If an error happens globally, we should make sure transaction status is set to error.\n  registerErrorInstrumentation();\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}