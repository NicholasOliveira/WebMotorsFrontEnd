{"ast":null,"code":"/*\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { generateUniqueID } from './generateUniqueID';\nexport var initMetric = function (name, value) {\n  if (value === void 0) {\n    value = -1;\n  }\n\n  return {\n    name: name,\n    value: value,\n    delta: 0,\n    entries: [],\n    id: generateUniqueID(),\n    isFinal: false\n  };\n};","map":{"version":3,"sources":["../../../../src/browser/web-vitals/lib/initMetric.ts"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;AAcG;AAGH,SAAS,gBAAT,QAAiC,oBAAjC;AAEA,OAAO,IAAM,UAAU,GAAG,UAAC,IAAD,EAAuB,KAAvB,EAAiC;AAAV,MAAA,KAAA,KAAA,KAAA,CAAA,EAAA;AAAA,IAAA,KAAA,GAAA,CAAS,CAAT;AAAU;;AACzD,SAAO;AACL,IAAA,IAAI,EAAA,IADC;AAEL,IAAA,KAAK,EAAA,KAFA;AAGL,IAAA,KAAK,EAAE,CAHF;AAIL,IAAA,OAAO,EAAE,EAJJ;AAKL,IAAA,EAAE,EAAE,gBAAgB,EALf;AAML,IAAA,OAAO,EAAE;AANJ,GAAP;AAQD,CATM","sourcesContent":["/*\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Metric } from '../types';\nimport { generateUniqueID } from './generateUniqueID';\n\nexport const initMetric = (name: Metric['name'], value = -1): Metric => {\n  return {\n    name,\n    value,\n    delta: 0,\n    entries: [],\n    id: generateUniqueID(),\n    isFinal: false,\n  };\n};\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}