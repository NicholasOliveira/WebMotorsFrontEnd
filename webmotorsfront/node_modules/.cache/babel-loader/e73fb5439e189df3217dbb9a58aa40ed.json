{"ast":null,"code":"import { __assign, __read, __spread } from \"tslib\";\nimport { getCurrentHub } from '@sentry/hub';\nimport { addInstrumentationHandler, isInstanceOf, isMatchingPattern } from '@sentry/utils';\nimport { getActiveTransaction, hasTracingEnabled } from '../utils';\nexport var DEFAULT_TRACING_ORIGINS = ['localhost', /^\\//];\nexport var defaultRequestInstrumentationOptions = {\n  traceFetch: true,\n  traceXHR: true,\n  tracingOrigins: DEFAULT_TRACING_ORIGINS\n};\n/** Registers span creators for xhr and fetch requests  */\n\nexport function registerRequestInstrumentation(_options) {\n  // eslint-disable-next-line @typescript-eslint/unbound-method\n  var _a = __assign(__assign({}, defaultRequestInstrumentationOptions), _options),\n      traceFetch = _a.traceFetch,\n      traceXHR = _a.traceXHR,\n      tracingOrigins = _a.tracingOrigins,\n      shouldCreateSpanForRequest = _a.shouldCreateSpanForRequest; // We should cache url -> decision so that we don't have to compute\n  // regexp everytime we create a request.\n\n\n  var urlMap = {};\n\n  var defaultShouldCreateSpan = function (url) {\n    if (urlMap[url]) {\n      return urlMap[url];\n    }\n\n    var origins = tracingOrigins;\n    urlMap[url] = origins.some(function (origin) {\n      return isMatchingPattern(url, origin);\n    }) && !isMatchingPattern(url, 'sentry_key');\n    return urlMap[url];\n  }; // We want that our users don't have to re-implement shouldCreateSpanForRequest themselves\n  // That's why we filter out already unwanted Spans from tracingOrigins\n\n\n  var shouldCreateSpan = defaultShouldCreateSpan;\n\n  if (typeof shouldCreateSpanForRequest === 'function') {\n    shouldCreateSpan = function (url) {\n      return defaultShouldCreateSpan(url) && shouldCreateSpanForRequest(url);\n    };\n  }\n\n  var spans = {};\n\n  if (traceFetch) {\n    addInstrumentationHandler({\n      callback: function (handlerData) {\n        fetchCallback(handlerData, shouldCreateSpan, spans);\n      },\n      type: 'fetch'\n    });\n  }\n\n  if (traceXHR) {\n    addInstrumentationHandler({\n      callback: function (handlerData) {\n        xhrCallback(handlerData, shouldCreateSpan, spans);\n      },\n      type: 'xhr'\n    });\n  }\n}\n/**\n * Create and track fetch request spans\n */\n\nexport function fetchCallback(handlerData, shouldCreateSpan, spans) {\n  var _a;\n\n  var currentClientOptions = (_a = getCurrentHub().getClient()) === null || _a === void 0 ? void 0 : _a.getOptions();\n\n  if (!(currentClientOptions && hasTracingEnabled(currentClientOptions)) || !(handlerData.fetchData && shouldCreateSpan(handlerData.fetchData.url))) {\n    return;\n  }\n\n  if (handlerData.endTimestamp && handlerData.fetchData.__span) {\n    var span = spans[handlerData.fetchData.__span];\n\n    if (span) {\n      var response = handlerData.response;\n\n      if (response) {\n        // TODO (kmclb) remove this once types PR goes through\n        // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n        span.setHttpStatus(response.status);\n      }\n\n      span.finish(); // eslint-disable-next-line @typescript-eslint/no-dynamic-delete\n\n      delete spans[handlerData.fetchData.__span];\n    }\n\n    return;\n  }\n\n  var activeTransaction = getActiveTransaction();\n\n  if (activeTransaction) {\n    var span = activeTransaction.startChild({\n      data: __assign(__assign({}, handlerData.fetchData), {\n        type: 'fetch'\n      }),\n      description: handlerData.fetchData.method + \" \" + handlerData.fetchData.url,\n      op: 'http'\n    });\n    handlerData.fetchData.__span = span.spanId;\n    spans[span.spanId] = span;\n    var request = handlerData.args[0] = handlerData.args[0]; // eslint-disable-next-line @typescript-eslint/no-explicit-any\n\n    var options = handlerData.args[1] = handlerData.args[1] || {};\n    var headers = options.headers;\n\n    if (isInstanceOf(request, Request)) {\n      headers = request.headers;\n    }\n\n    if (headers) {\n      // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n      if (typeof headers.append === 'function') {\n        // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n        headers.append('sentry-trace', span.toTraceparent());\n      } else if (Array.isArray(headers)) {\n        headers = __spread(headers, [['sentry-trace', span.toTraceparent()]]);\n      } else {\n        headers = __assign(__assign({}, headers), {\n          'sentry-trace': span.toTraceparent()\n        });\n      }\n    } else {\n      headers = {\n        'sentry-trace': span.toTraceparent()\n      };\n    }\n\n    options.headers = headers;\n  }\n}\n/**\n * Create and track xhr request spans\n */\n\nexport function xhrCallback(handlerData, shouldCreateSpan, spans) {\n  var _a;\n\n  var currentClientOptions = (_a = getCurrentHub().getClient()) === null || _a === void 0 ? void 0 : _a.getOptions();\n\n  if (!(currentClientOptions && hasTracingEnabled(currentClientOptions)) || !(handlerData.xhr && handlerData.xhr.__sentry_xhr__ && shouldCreateSpan(handlerData.xhr.__sentry_xhr__.url)) || handlerData.xhr.__sentry_own_request__) {\n    return;\n  }\n\n  var xhr = handlerData.xhr.__sentry_xhr__; // check first if the request has finished and is tracked by an existing span which should now end\n\n  if (handlerData.endTimestamp && handlerData.xhr.__sentry_xhr_span_id__) {\n    var span = spans[handlerData.xhr.__sentry_xhr_span_id__];\n\n    if (span) {\n      span.setHttpStatus(xhr.status_code);\n      span.finish(); // eslint-disable-next-line @typescript-eslint/no-dynamic-delete\n\n      delete spans[handlerData.xhr.__sentry_xhr_span_id__];\n    }\n\n    return;\n  } // if not, create a new span to track it\n\n\n  var activeTransaction = getActiveTransaction();\n\n  if (activeTransaction) {\n    var span = activeTransaction.startChild({\n      data: __assign(__assign({}, xhr.data), {\n        type: 'xhr',\n        method: xhr.method,\n        url: xhr.url\n      }),\n      description: xhr.method + \" \" + xhr.url,\n      op: 'http'\n    });\n    handlerData.xhr.__sentry_xhr_span_id__ = span.spanId;\n    spans[handlerData.xhr.__sentry_xhr_span_id__] = span;\n\n    if (handlerData.xhr.setRequestHeader) {\n      try {\n        handlerData.xhr.setRequestHeader('sentry-trace', span.toTraceparent());\n      } catch (_) {// Error: InvalidStateError: Failed to execute 'setRequestHeader' on 'XMLHttpRequest': The object's state must be OPENED.\n      }\n    }\n  }\n}","map":{"version":3,"sources":["../../src/browser/request.ts"],"names":[],"mappings":"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","sourcesContent":["import { getCurrentHub } from '@sentry/hub';\nimport { addInstrumentationHandler, isInstanceOf, isMatchingPattern } from '@sentry/utils';\n\nimport { Span } from '../span';\nimport { getActiveTransaction, hasTracingEnabled } from '../utils';\n\nexport const DEFAULT_TRACING_ORIGINS = ['localhost', /^\\//];\n\n/** Options for Request Instrumentation */\nexport interface RequestInstrumentationOptions {\n  /**\n   * List of strings / regex where the integration should create Spans out of. Additionally this will be used\n   * to define which outgoing requests the `sentry-trace` header will be attached to.\n   *\n   * Default: ['localhost', /^\\//] {@see DEFAULT_TRACING_ORIGINS}\n   */\n  tracingOrigins: Array<string | RegExp>;\n\n  /**\n   * Flag to disable patching all together for fetch requests.\n   *\n   * Default: true\n   */\n  traceFetch: boolean;\n\n  /**\n   * Flag to disable patching all together for xhr requests.\n   *\n   * Default: true\n   */\n  traceXHR: boolean;\n\n  /**\n   * This function will be called before creating a span for a request with the given url.\n   * Return false if you don't want a span for the given url.\n   *\n   * By default it uses the `tracingOrigins` options as a url match.\n   */\n  shouldCreateSpanForRequest?(url: string): boolean;\n}\n\n/** Data returned from fetch callback */\nexport interface FetchData {\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  args: any[]; // the arguments passed to the fetch call itself\n  fetchData?: {\n    method: string;\n    url: string;\n    // span_id\n    __span?: string;\n  };\n\n  // TODO Should this be unknown instead? If we vendor types, make it a Response\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  response?: any;\n\n  startTimestamp: number;\n  endTimestamp?: number;\n}\n\n/** Data returned from XHR request */\nexport interface XHRData {\n  xhr?: {\n    __sentry_xhr__?: {\n      method: string;\n      url: string;\n      status_code: number;\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      data: Record<string, any>;\n    };\n    __sentry_xhr_span_id__?: string;\n    setRequestHeader?: (key: string, val: string) => void;\n    __sentry_own_request__?: boolean;\n  };\n  startTimestamp: number;\n  endTimestamp?: number;\n}\n\nexport const defaultRequestInstrumentationOptions: RequestInstrumentationOptions = {\n  traceFetch: true,\n  traceXHR: true,\n  tracingOrigins: DEFAULT_TRACING_ORIGINS,\n};\n\n/** Registers span creators for xhr and fetch requests  */\nexport function registerRequestInstrumentation(_options?: Partial<RequestInstrumentationOptions>): void {\n  // eslint-disable-next-line @typescript-eslint/unbound-method\n  const { traceFetch, traceXHR, tracingOrigins, shouldCreateSpanForRequest } = {\n    ...defaultRequestInstrumentationOptions,\n    ..._options,\n  };\n\n  // We should cache url -> decision so that we don't have to compute\n  // regexp everytime we create a request.\n  const urlMap: Record<string, boolean> = {};\n\n  const defaultShouldCreateSpan = (url: string): boolean => {\n    if (urlMap[url]) {\n      return urlMap[url];\n    }\n    const origins = tracingOrigins;\n    urlMap[url] =\n      origins.some((origin: string | RegExp) => isMatchingPattern(url, origin)) &&\n      !isMatchingPattern(url, 'sentry_key');\n    return urlMap[url];\n  };\n\n  // We want that our users don't have to re-implement shouldCreateSpanForRequest themselves\n  // That's why we filter out already unwanted Spans from tracingOrigins\n  let shouldCreateSpan = defaultShouldCreateSpan;\n  if (typeof shouldCreateSpanForRequest === 'function') {\n    shouldCreateSpan = (url: string) => {\n      return defaultShouldCreateSpan(url) && shouldCreateSpanForRequest(url);\n    };\n  }\n\n  const spans: Record<string, Span> = {};\n\n  if (traceFetch) {\n    addInstrumentationHandler({\n      callback: (handlerData: FetchData) => {\n        fetchCallback(handlerData, shouldCreateSpan, spans);\n      },\n      type: 'fetch',\n    });\n  }\n\n  if (traceXHR) {\n    addInstrumentationHandler({\n      callback: (handlerData: XHRData) => {\n        xhrCallback(handlerData, shouldCreateSpan, spans);\n      },\n      type: 'xhr',\n    });\n  }\n}\n\n/**\n * Create and track fetch request spans\n */\nexport function fetchCallback(\n  handlerData: FetchData,\n  shouldCreateSpan: (url: string) => boolean,\n  spans: Record<string, Span>,\n): void {\n  const currentClientOptions = getCurrentHub()\n    .getClient()\n    ?.getOptions();\n  if (\n    !(currentClientOptions && hasTracingEnabled(currentClientOptions)) ||\n    !(handlerData.fetchData && shouldCreateSpan(handlerData.fetchData.url))\n  ) {\n    return;\n  }\n\n  if (handlerData.endTimestamp && handlerData.fetchData.__span) {\n    const span = spans[handlerData.fetchData.__span];\n    if (span) {\n      const response = handlerData.response;\n      if (response) {\n        // TODO (kmclb) remove this once types PR goes through\n        // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n        span.setHttpStatus(response.status);\n      }\n      span.finish();\n\n      // eslint-disable-next-line @typescript-eslint/no-dynamic-delete\n      delete spans[handlerData.fetchData.__span];\n    }\n    return;\n  }\n\n  const activeTransaction = getActiveTransaction();\n  if (activeTransaction) {\n    const span = activeTransaction.startChild({\n      data: {\n        ...handlerData.fetchData,\n        type: 'fetch',\n      },\n      description: `${handlerData.fetchData.method} ${handlerData.fetchData.url}`,\n      op: 'http',\n    });\n\n    handlerData.fetchData.__span = span.spanId;\n    spans[span.spanId] = span;\n\n    const request = (handlerData.args[0] = handlerData.args[0] as string | Request);\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    const options = (handlerData.args[1] = (handlerData.args[1] as { [key: string]: any }) || {});\n    let headers = options.headers;\n    if (isInstanceOf(request, Request)) {\n      headers = (request as Request).headers;\n    }\n    if (headers) {\n      // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n      if (typeof headers.append === 'function') {\n        // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n        headers.append('sentry-trace', span.toTraceparent());\n      } else if (Array.isArray(headers)) {\n        headers = [...headers, ['sentry-trace', span.toTraceparent()]];\n      } else {\n        headers = { ...headers, 'sentry-trace': span.toTraceparent() };\n      }\n    } else {\n      headers = { 'sentry-trace': span.toTraceparent() };\n    }\n    options.headers = headers;\n  }\n}\n\n/**\n * Create and track xhr request spans\n */\nexport function xhrCallback(\n  handlerData: XHRData,\n  shouldCreateSpan: (url: string) => boolean,\n  spans: Record<string, Span>,\n): void {\n  const currentClientOptions = getCurrentHub()\n    .getClient()\n    ?.getOptions();\n  if (\n    !(currentClientOptions && hasTracingEnabled(currentClientOptions)) ||\n    !(handlerData.xhr && handlerData.xhr.__sentry_xhr__ && shouldCreateSpan(handlerData.xhr.__sentry_xhr__.url)) ||\n    handlerData.xhr.__sentry_own_request__\n  ) {\n    return;\n  }\n\n  const xhr = handlerData.xhr.__sentry_xhr__;\n\n  // check first if the request has finished and is tracked by an existing span which should now end\n  if (handlerData.endTimestamp && handlerData.xhr.__sentry_xhr_span_id__) {\n    const span = spans[handlerData.xhr.__sentry_xhr_span_id__];\n    if (span) {\n      span.setHttpStatus(xhr.status_code);\n      span.finish();\n\n      // eslint-disable-next-line @typescript-eslint/no-dynamic-delete\n      delete spans[handlerData.xhr.__sentry_xhr_span_id__];\n    }\n    return;\n  }\n\n  // if not, create a new span to track it\n  const activeTransaction = getActiveTransaction();\n  if (activeTransaction) {\n    const span = activeTransaction.startChild({\n      data: {\n        ...xhr.data,\n        type: 'xhr',\n        method: xhr.method,\n        url: xhr.url,\n      },\n      description: `${xhr.method} ${xhr.url}`,\n      op: 'http',\n    });\n\n    handlerData.xhr.__sentry_xhr_span_id__ = span.spanId;\n    spans[handlerData.xhr.__sentry_xhr_span_id__] = span;\n\n    if (handlerData.xhr.setRequestHeader) {\n      try {\n        handlerData.xhr.setRequestHeader('sentry-trace', span.toTraceparent());\n      } catch (_) {\n        // Error: InvalidStateError: Failed to execute 'setRequestHeader' on 'XMLHttpRequest': The object's state must be OPENED.\n      }\n    }\n  }\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}