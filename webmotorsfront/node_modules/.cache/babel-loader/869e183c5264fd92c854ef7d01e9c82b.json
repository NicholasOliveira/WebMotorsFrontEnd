{"ast":null,"code":"import { __assign } from \"tslib\";\nimport { logger } from '@sentry/utils';\nimport { startIdleTransaction } from '../hubextensions';\nimport { DEFAULT_IDLE_TIMEOUT } from '../idletransaction';\nimport { SpanStatus } from '../spanstatus';\nimport { extractTraceparentData, secToMs } from '../utils';\nimport { registerBackgroundTabDetection } from './backgroundtab';\nimport { MetricsInstrumentation } from './metrics';\nimport { defaultRequestInstrumentationOptions, registerRequestInstrumentation } from './request';\nimport { defaultRoutingInstrumentation } from './router';\nexport var DEFAULT_MAX_TRANSACTION_DURATION_SECONDS = 600;\n\nvar DEFAULT_BROWSER_TRACING_OPTIONS = __assign({\n  idleTimeout: DEFAULT_IDLE_TIMEOUT,\n  markBackgroundTransactions: true,\n  maxTransactionDuration: DEFAULT_MAX_TRANSACTION_DURATION_SECONDS,\n  routingInstrumentation: defaultRoutingInstrumentation,\n  startTransactionOnLocationChange: true,\n  startTransactionOnPageLoad: true\n}, defaultRequestInstrumentationOptions);\n/**\n * The Browser Tracing integration automatically instruments browser pageload/navigation\n * actions as transactions, and captures requests, metrics and errors as spans.\n *\n * The integration can be configured with a variety of options, and can be extended to use\n * any routing library. This integration uses {@see IdleTransaction} to create transactions.\n */\n\n\nvar BrowserTracing =\n/** @class */\nfunction () {\n  function BrowserTracing(_options) {\n    /**\n     * @inheritDoc\n     */\n    this.name = BrowserTracing.id;\n    this._metrics = new MetricsInstrumentation();\n    this._emitOptionsWarning = false;\n    var tracingOrigins = defaultRequestInstrumentationOptions.tracingOrigins; // NOTE: Logger doesn't work in constructors, as it's initialized after integrations instances\n\n    if (_options && _options.tracingOrigins && Array.isArray(_options.tracingOrigins) && _options.tracingOrigins.length !== 0) {\n      tracingOrigins = _options.tracingOrigins;\n    } else {\n      this._emitOptionsWarning = true;\n    }\n\n    this.options = __assign(__assign(__assign({}, DEFAULT_BROWSER_TRACING_OPTIONS), _options), {\n      tracingOrigins: tracingOrigins\n    });\n  }\n  /**\n   * @inheritDoc\n   */\n\n\n  BrowserTracing.prototype.setupOnce = function (_, getCurrentHub) {\n    var _this = this;\n\n    this._getCurrentHub = getCurrentHub;\n\n    if (this._emitOptionsWarning) {\n      logger.warn('[Tracing] You need to define `tracingOrigins` in the options. Set an array of urls or patterns to trace.');\n      logger.warn(\"[Tracing] We added a reasonable default for you: \" + defaultRequestInstrumentationOptions.tracingOrigins);\n    } // eslint-disable-next-line @typescript-eslint/unbound-method\n\n\n    var _a = this.options,\n        routingInstrumentation = _a.routingInstrumentation,\n        startTransactionOnLocationChange = _a.startTransactionOnLocationChange,\n        startTransactionOnPageLoad = _a.startTransactionOnPageLoad,\n        markBackgroundTransactions = _a.markBackgroundTransactions,\n        traceFetch = _a.traceFetch,\n        traceXHR = _a.traceXHR,\n        tracingOrigins = _a.tracingOrigins,\n        shouldCreateSpanForRequest = _a.shouldCreateSpanForRequest;\n    routingInstrumentation(function (context) {\n      return _this._createRouteTransaction(context);\n    }, startTransactionOnPageLoad, startTransactionOnLocationChange);\n\n    if (markBackgroundTransactions) {\n      registerBackgroundTabDetection();\n    }\n\n    registerRequestInstrumentation({\n      traceFetch: traceFetch,\n      traceXHR: traceXHR,\n      tracingOrigins: tracingOrigins,\n      shouldCreateSpanForRequest: shouldCreateSpanForRequest\n    });\n  };\n  /** Create routing idle transaction. */\n\n\n  BrowserTracing.prototype._createRouteTransaction = function (context) {\n    var _this = this;\n\n    if (!this._getCurrentHub) {\n      logger.warn(\"[Tracing] Did not create \" + context.op + \" transaction because _getCurrentHub is invalid.\");\n      return undefined;\n    } // eslint-disable-next-line @typescript-eslint/unbound-method\n\n\n    var _a = this.options,\n        beforeNavigate = _a.beforeNavigate,\n        idleTimeout = _a.idleTimeout,\n        maxTransactionDuration = _a.maxTransactionDuration;\n    var parentContextFromHeader = context.op === 'pageload' ? getHeaderContext() : undefined;\n\n    var expandedContext = __assign(__assign(__assign({}, context), parentContextFromHeader), {\n      trimEnd: true\n    });\n\n    var modifiedContext = typeof beforeNavigate === 'function' ? beforeNavigate(expandedContext) : expandedContext; // For backwards compatibility reasons, beforeNavigate can return undefined to \"drop\" the transaction (prevent it\n    // from being sent to Sentry).\n\n    var finalContext = modifiedContext === undefined ? __assign(__assign({}, expandedContext), {\n      sampled: false\n    }) : modifiedContext;\n\n    if (finalContext.sampled === false) {\n      logger.log(\"[Tracing] Will not send \" + finalContext.op + \" transaction because of beforeNavigate.\");\n    }\n\n    var hub = this._getCurrentHub();\n\n    var idleTransaction = startIdleTransaction(hub, finalContext, idleTimeout, true);\n    logger.log(\"[Tracing] Starting \" + finalContext.op + \" transaction on scope\");\n    idleTransaction.registerBeforeFinishCallback(function (transaction, endTimestamp) {\n      _this._metrics.addPerformanceEntries(transaction);\n\n      adjustTransactionDuration(secToMs(maxTransactionDuration), transaction, endTimestamp);\n    });\n    return idleTransaction;\n  };\n  /**\n   * @inheritDoc\n   */\n\n\n  BrowserTracing.id = 'BrowserTracing';\n  return BrowserTracing;\n}();\n\nexport { BrowserTracing };\n/**\n * Gets transaction context from a sentry-trace meta.\n *\n * @returns Transaction context data from the header or undefined if there's no header or the header is malformed\n */\n\nexport function getHeaderContext() {\n  var header = getMetaContent('sentry-trace');\n\n  if (header) {\n    return extractTraceparentData(header);\n  }\n\n  return undefined;\n}\n/** Returns the value of a meta tag */\n\nexport function getMetaContent(metaName) {\n  var el = document.querySelector(\"meta[name=\" + metaName + \"]\");\n  return el ? el.getAttribute('content') : null;\n}\n/** Adjusts transaction value based on max transaction duration */\n\nfunction adjustTransactionDuration(maxDuration, transaction, endTimestamp) {\n  var diff = endTimestamp - transaction.startTimestamp;\n  var isOutdatedTransaction = endTimestamp && (diff > maxDuration || diff < 0);\n\n  if (isOutdatedTransaction) {\n    transaction.setStatus(SpanStatus.DeadlineExceeded);\n    transaction.setTag('maxTransactionDurationExceeded', 'true');\n  }\n}","map":{"version":3,"sources":["../../src/browser/browsertracing.ts"],"names":[],"mappings":"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","sourcesContent":["import { Hub } from '@sentry/hub';\nimport { EventProcessor, Integration, Transaction as TransactionType, TransactionContext } from '@sentry/types';\nimport { logger } from '@sentry/utils';\n\nimport { startIdleTransaction } from '../hubextensions';\nimport { DEFAULT_IDLE_TIMEOUT, IdleTransaction } from '../idletransaction';\nimport { SpanStatus } from '../spanstatus';\nimport { extractTraceparentData, secToMs } from '../utils';\nimport { registerBackgroundTabDetection } from './backgroundtab';\nimport { MetricsInstrumentation } from './metrics';\nimport {\n  defaultRequestInstrumentationOptions,\n  registerRequestInstrumentation,\n  RequestInstrumentationOptions,\n} from './request';\nimport { defaultRoutingInstrumentation } from './router';\n\nexport const DEFAULT_MAX_TRANSACTION_DURATION_SECONDS = 600;\n\n/** Options for Browser Tracing integration */\nexport interface BrowserTracingOptions extends RequestInstrumentationOptions {\n  /**\n   * The time to wait in ms until the transaction will be finished. The transaction will use the end timestamp of\n   * the last finished span as the endtime for the transaction.\n   * Time is in ms.\n   *\n   * Default: 1000\n   */\n  idleTimeout: number;\n\n  /**\n   * Flag to enable/disable creation of `navigation` transaction on history changes.\n   *\n   * Default: true\n   */\n  startTransactionOnLocationChange: boolean;\n\n  /**\n   * Flag to enable/disable creation of `pageload` transaction on first pageload.\n   *\n   * Default: true\n   */\n  startTransactionOnPageLoad: boolean;\n\n  /**\n   * The maximum duration of a transaction before it will be marked as \"deadline_exceeded\".\n   * If you never want to mark a transaction set it to 0.\n   * Time is in seconds.\n   *\n   * Default: 600\n   */\n  maxTransactionDuration: number;\n\n  /**\n   * Flag Transactions where tabs moved to background with \"cancelled\". Browser background tab timing is\n   * not suited towards doing precise measurements of operations. By default, we recommend that this option\n   * be enabled as background transactions can mess up your statistics in nondeterministic ways.\n   *\n   * Default: true\n   */\n  markBackgroundTransactions: boolean;\n\n  /**\n   * beforeNavigate is called before a pageload/navigation transaction is created and allows users to modify transaction\n   * context data, or drop the transaction entirely (by setting `sampled = false` in the context).\n   *\n   * Note: For legacy reasons, transactions can also be dropped by returning `undefined`.\n   *\n   * @param context: The context data which will be passed to `startTransaction` by default\n   *\n   * @returns A (potentially) modified context object, with `sampled = false` if the transaction should be dropped.\n   */\n  beforeNavigate?(context: TransactionContext): TransactionContext | undefined;\n\n  /**\n   * Instrumentation that creates routing change transactions. By default creates\n   * pageload and navigation transactions.\n   */\n  routingInstrumentation<T extends TransactionType>(\n    startTransaction: (context: TransactionContext) => T | undefined,\n    startTransactionOnPageLoad?: boolean,\n    startTransactionOnLocationChange?: boolean,\n  ): void;\n}\n\nconst DEFAULT_BROWSER_TRACING_OPTIONS = {\n  idleTimeout: DEFAULT_IDLE_TIMEOUT,\n  markBackgroundTransactions: true,\n  maxTransactionDuration: DEFAULT_MAX_TRANSACTION_DURATION_SECONDS,\n  routingInstrumentation: defaultRoutingInstrumentation,\n  startTransactionOnLocationChange: true,\n  startTransactionOnPageLoad: true,\n  ...defaultRequestInstrumentationOptions,\n};\n\n/**\n * The Browser Tracing integration automatically instruments browser pageload/navigation\n * actions as transactions, and captures requests, metrics and errors as spans.\n *\n * The integration can be configured with a variety of options, and can be extended to use\n * any routing library. This integration uses {@see IdleTransaction} to create transactions.\n */\nexport class BrowserTracing implements Integration {\n  /**\n   * @inheritDoc\n   */\n  public static id: string = 'BrowserTracing';\n\n  /** Browser Tracing integration options */\n  public options: BrowserTracingOptions;\n\n  /**\n   * @inheritDoc\n   */\n  public name: string = BrowserTracing.id;\n\n  private _getCurrentHub?: () => Hub;\n\n  private readonly _metrics: MetricsInstrumentation = new MetricsInstrumentation();\n\n  private readonly _emitOptionsWarning: boolean = false;\n\n  public constructor(_options?: Partial<BrowserTracingOptions>) {\n    let tracingOrigins = defaultRequestInstrumentationOptions.tracingOrigins;\n    // NOTE: Logger doesn't work in constructors, as it's initialized after integrations instances\n    if (\n      _options &&\n      _options.tracingOrigins &&\n      Array.isArray(_options.tracingOrigins) &&\n      _options.tracingOrigins.length !== 0\n    ) {\n      tracingOrigins = _options.tracingOrigins;\n    } else {\n      this._emitOptionsWarning = true;\n    }\n\n    this.options = {\n      ...DEFAULT_BROWSER_TRACING_OPTIONS,\n      ..._options,\n      tracingOrigins,\n    };\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public setupOnce(_: (callback: EventProcessor) => void, getCurrentHub: () => Hub): void {\n    this._getCurrentHub = getCurrentHub;\n\n    if (this._emitOptionsWarning) {\n      logger.warn(\n        '[Tracing] You need to define `tracingOrigins` in the options. Set an array of urls or patterns to trace.',\n      );\n      logger.warn(\n        `[Tracing] We added a reasonable default for you: ${defaultRequestInstrumentationOptions.tracingOrigins}`,\n      );\n    }\n\n    // eslint-disable-next-line @typescript-eslint/unbound-method\n    const {\n      routingInstrumentation,\n      startTransactionOnLocationChange,\n      startTransactionOnPageLoad,\n      markBackgroundTransactions,\n      traceFetch,\n      traceXHR,\n      tracingOrigins,\n      shouldCreateSpanForRequest,\n    } = this.options;\n\n    routingInstrumentation(\n      (context: TransactionContext) => this._createRouteTransaction(context),\n      startTransactionOnPageLoad,\n      startTransactionOnLocationChange,\n    );\n\n    if (markBackgroundTransactions) {\n      registerBackgroundTabDetection();\n    }\n\n    registerRequestInstrumentation({ traceFetch, traceXHR, tracingOrigins, shouldCreateSpanForRequest });\n  }\n\n  /** Create routing idle transaction. */\n  private _createRouteTransaction(context: TransactionContext): TransactionType | undefined {\n    if (!this._getCurrentHub) {\n      logger.warn(`[Tracing] Did not create ${context.op} transaction because _getCurrentHub is invalid.`);\n      return undefined;\n    }\n\n    // eslint-disable-next-line @typescript-eslint/unbound-method\n    const { beforeNavigate, idleTimeout, maxTransactionDuration } = this.options;\n\n    const parentContextFromHeader = context.op === 'pageload' ? getHeaderContext() : undefined;\n\n    const expandedContext = {\n      ...context,\n      ...parentContextFromHeader,\n      trimEnd: true,\n    };\n    const modifiedContext = typeof beforeNavigate === 'function' ? beforeNavigate(expandedContext) : expandedContext;\n\n    // For backwards compatibility reasons, beforeNavigate can return undefined to \"drop\" the transaction (prevent it\n    // from being sent to Sentry).\n    const finalContext = modifiedContext === undefined ? { ...expandedContext, sampled: false } : modifiedContext;\n\n    if (finalContext.sampled === false) {\n      logger.log(`[Tracing] Will not send ${finalContext.op} transaction because of beforeNavigate.`);\n    }\n\n    const hub = this._getCurrentHub();\n    const idleTransaction = startIdleTransaction(hub, finalContext, idleTimeout, true);\n    logger.log(`[Tracing] Starting ${finalContext.op} transaction on scope`);\n    idleTransaction.registerBeforeFinishCallback((transaction, endTimestamp) => {\n      this._metrics.addPerformanceEntries(transaction);\n      adjustTransactionDuration(secToMs(maxTransactionDuration), transaction, endTimestamp);\n    });\n\n    return idleTransaction as TransactionType;\n  }\n}\n\n/**\n * Gets transaction context from a sentry-trace meta.\n *\n * @returns Transaction context data from the header or undefined if there's no header or the header is malformed\n */\nexport function getHeaderContext(): Partial<TransactionContext> | undefined {\n  const header = getMetaContent('sentry-trace');\n  if (header) {\n    return extractTraceparentData(header);\n  }\n\n  return undefined;\n}\n\n/** Returns the value of a meta tag */\nexport function getMetaContent(metaName: string): string | null {\n  const el = document.querySelector(`meta[name=${metaName}]`);\n  return el ? el.getAttribute('content') : null;\n}\n\n/** Adjusts transaction value based on max transaction duration */\nfunction adjustTransactionDuration(maxDuration: number, transaction: IdleTransaction, endTimestamp: number): void {\n  const diff = endTimestamp - transaction.startTimestamp;\n  const isOutdatedTransaction = endTimestamp && (diff > maxDuration || diff < 0);\n  if (isOutdatedTransaction) {\n    transaction.setStatus(SpanStatus.DeadlineExceeded);\n    transaction.setTag('maxTransactionDurationExceeded', 'true');\n  }\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}