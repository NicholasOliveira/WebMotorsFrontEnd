{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/imac20/Desktop/WebMotorsFrontEnd/webmotorsfront/src/Components/SearchBar/DynamicLabels.js\";\nimport React from 'react';\nexport function LabelMarca({\n  makes,\n  searchModel\n}) {\n  return /*#__PURE__*/_jsxDEV(\"label\", {\n    htmlFor: \"Marca\",\n    children: [/*#__PURE__*/_jsxDEV(\"span\", {\n      children: \"Marca:\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 6,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n      name: \"Marca\",\n      id: \"Marca\",\n      onChange: searchModel,\n      children: [/*#__PURE__*/_jsxDEV(\"option\", {\n        value: \"\",\n        children: \"Todas\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 8,\n        columnNumber: 9\n      }, this), makes.map(make => /*#__PURE__*/_jsxDEV(\"option\", {\n        value: make.ID,\n        children: make.Name\n      }, make.ID, false, {\n        fileName: _jsxFileName,\n        lineNumber: 10,\n        columnNumber: 11\n      }, this))]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 7,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 5,\n    columnNumber: 5\n  }, this);\n}\n_c = LabelMarca;\nexport function LabelModel({\n  models,\n  searchVersion\n}) {\n  return /*#__PURE__*/_jsxDEV(\"label\", {\n    htmlFor: \"models\",\n    style: {\n      marginRight: 0\n    },\n    children: [/*#__PURE__*/_jsxDEV(\"span\", {\n      children: \"Modelo:\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 22,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n      name: \"models\",\n      onChange: searchVersion,\n      children: [/*#__PURE__*/_jsxDEV(\"option\", {\n        value: \"\",\n        children: \"Todos\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 24,\n        columnNumber: 9\n      }, this), models.map(model => /*#__PURE__*/_jsxDEV(\"option\", {\n        value: model.ID,\n        children: model.Name\n      }, model.ID, false, {\n        fileName: _jsxFileName,\n        lineNumber: 26,\n        columnNumber: 11\n      }, this))]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 23,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 21,\n    columnNumber: 5\n  }, this);\n}\n_c2 = LabelModel;\nexport function LabelVersion({\n  versions\n}) {\n  let ver = [];\n\n  if (typeof versions !== 'undefined') {\n    ver = versions;\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"label\", {\n    htmlFor: \"versions\",\n    style: {\n      marginRight: 0\n    },\n    children: [/*#__PURE__*/_jsxDEV(\"span\", {\n      children: \"Vers\\xE3o:\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n      name: \"versions\",\n      children: [/*#__PURE__*/_jsxDEV(\"option\", {\n        value: \"\",\n        children: \"Todas\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 44,\n        columnNumber: 9\n      }, this), ver.map(version => /*#__PURE__*/_jsxDEV(\"option\", {\n        value: version.ID,\n        children: version.Name\n      }, version.ID, false, {\n        fileName: _jsxFileName,\n        lineNumber: 46,\n        columnNumber: 11\n      }, this))]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 41,\n    columnNumber: 5\n  }, this);\n}\n_c3 = LabelVersion;\n\nvar _c, _c2, _c3;\n\n$RefreshReg$(_c, \"LabelMarca\");\n$RefreshReg$(_c2, \"LabelModel\");\n$RefreshReg$(_c3, \"LabelVersion\");","map":{"version":3,"sources":["/Users/imac20/Desktop/WebMotorsFrontEnd/webmotorsfront/src/Components/SearchBar/DynamicLabels.js"],"names":["React","LabelMarca","makes","searchModel","map","make","ID","Name","LabelModel","models","searchVersion","marginRight","model","LabelVersion","versions","ver","version"],"mappings":";;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AAEA,OAAO,SAASC,UAAT,CAAoB;AAAEC,EAAAA,KAAF;AAASC,EAAAA;AAAT,CAApB,EAAgD;AACrD,sBACE;AAAO,IAAA,OAAO,EAAC,OAAf;AAAA,4BACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YADF,eAEE;AAAQ,MAAA,IAAI,EAAC,OAAb;AAAqB,MAAA,EAAE,EAAC,OAAxB;AAAgC,MAAA,QAAQ,EAAEA,WAA1C;AAAA,8BACE;AAAQ,QAAA,KAAK,EAAC,EAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cADF,EAEGD,KAAK,CAACE,GAAN,CAAWC,IAAD,iBACT;AAAsB,QAAA,KAAK,EAAEA,IAAI,CAACC,EAAlC;AAAA,kBACGD,IAAI,CAACE;AADR,SAAaF,IAAI,CAACC,EAAlB;AAAA;AAAA;AAAA;AAAA,cADD,CAFH;AAAA;AAAA;AAAA;AAAA;AAAA,YAFF;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAaD;KAdeL,U;AAgBhB,OAAO,SAASO,UAAT,CAAoB;AAAEC,EAAAA,MAAF;AAAUC,EAAAA;AAAV,CAApB,EAAmD;AACxD,sBACE;AAAO,IAAA,OAAO,EAAC,QAAf;AAAwB,IAAA,KAAK,EAAE;AAAEC,MAAAA,WAAW,EAAE;AAAf,KAA/B;AAAA,4BACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YADF,eAEE;AAAQ,MAAA,IAAI,EAAC,QAAb;AAAsB,MAAA,QAAQ,EAAED,aAAhC;AAAA,8BACE;AAAQ,QAAA,KAAK,EAAC,EAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cADF,EAEGD,MAAM,CAACL,GAAP,CAAYQ,KAAD,iBACV;AAAuB,QAAA,KAAK,EAAEA,KAAK,CAACN,EAApC;AAAA,kBACGM,KAAK,CAACL;AADT,SAAaK,KAAK,CAACN,EAAnB;AAAA;AAAA;AAAA;AAAA,cADD,CAFH;AAAA;AAAA;AAAA;AAAA;AAAA,YAFF;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAaD;MAdeE,U;AAgBhB,OAAO,SAASK,YAAT,CAAsB;AAAEC,EAAAA;AAAF,CAAtB,EAAwC;AAC7C,MAAIC,GAAG,GAAG,EAAV;;AACA,MAAI,OAAOD,QAAP,KAAoB,WAAxB,EAAqC;AACnCC,IAAAA,GAAG,GAAGD,QAAN;AACD;;AACD,sBACE;AAAO,IAAA,OAAO,EAAC,UAAf;AAA0B,IAAA,KAAK,EAAE;AAAEH,MAAAA,WAAW,EAAE;AAAf,KAAjC;AAAA,4BACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YADF,eAEE;AAAQ,MAAA,IAAI,EAAC,UAAb;AAAA,8BACE;AAAQ,QAAA,KAAK,EAAC,EAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cADF,EAEGI,GAAG,CAACX,GAAJ,CAASY,OAAD,iBACP;AAAyB,QAAA,KAAK,EAAEA,OAAO,CAACV,EAAxC;AAAA,kBACGU,OAAO,CAACT;AADX,SAAaS,OAAO,CAACV,EAArB;AAAA;AAAA;AAAA;AAAA,cADD,CAFH;AAAA;AAAA;AAAA;AAAA;AAAA,YAFF;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAaD;MAlBeO,Y","sourcesContent":["import React from 'react';\n\nexport function LabelMarca({ makes, searchModel }:any) {\n  return (\n    <label htmlFor=\"Marca\">\n      <span>Marca:</span>\n      <select name=\"Marca\" id=\"Marca\" onChange={searchModel}>\n        <option value=\"\">Todas</option>\n        {makes.map((make) => (\n          <option key={make.ID} value={make.ID}>\n            {make.Name}\n          </option>\n        ))}\n      </select>\n    </label>\n  );\n}\n\nexport function LabelModel({ models, searchVersion }:any) {\n  return (\n    <label htmlFor=\"models\" style={{ marginRight: 0 }}>\n      <span>Modelo:</span>\n      <select name=\"models\" onChange={searchVersion}>\n        <option value=\"\">Todos</option>\n        {models.map((model) => (\n          <option key={model.ID} value={model.ID}>\n            {model.Name}\n          </option>\n        ))}\n      </select>\n    </label>\n  );\n}\n\nexport function LabelVersion({ versions }:any) {\n  let ver = [];\n  if (typeof versions !== 'undefined') {\n    ver = versions;\n  }\n  return (\n    <label htmlFor=\"versions\" style={{ marginRight: 0 }}>\n      <span>Vers√£o:</span>\n      <select name=\"versions\">\n        <option value=\"\">Todas</option>\n        {ver.map((version) => (\n          <option key={version.ID} value={version.ID}>\n            {version.Name}\n          </option>\n        ))}\n      </select>\n    </label>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}