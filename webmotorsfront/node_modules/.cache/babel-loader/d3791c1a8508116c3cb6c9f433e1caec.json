{"ast":null,"code":"import { addInstrumentationHandler, getGlobalObject, logger } from '@sentry/utils';\nvar global = getGlobalObject();\n/**\n * Default function implementing pageload and navigation transactions\n */\n\nexport function defaultRoutingInstrumentation(startTransaction, startTransactionOnPageLoad, startTransactionOnLocationChange) {\n  if (startTransactionOnPageLoad === void 0) {\n    startTransactionOnPageLoad = true;\n  }\n\n  if (startTransactionOnLocationChange === void 0) {\n    startTransactionOnLocationChange = true;\n  }\n\n  if (!global || !global.location) {\n    logger.warn('Could not initialize routing instrumentation due to invalid location');\n    return;\n  }\n\n  var startingUrl = global.location.href;\n  var activeTransaction;\n\n  if (startTransactionOnPageLoad) {\n    activeTransaction = startTransaction({\n      name: global.location.pathname,\n      op: 'pageload'\n    });\n  }\n\n  if (startTransactionOnLocationChange) {\n    addInstrumentationHandler({\n      callback: function (_a) {\n        var to = _a.to,\n            from = _a.from;\n        /**\n         * This early return is there to account for some cases where a navigation transaction starts right after\n         * long-running pageload. We make sure that if `from` is undefined and a valid `startingURL` exists, we don't\n         * create an uneccessary navigation transaction.\n         *\n         * This was hard to duplicate, but this behavior stopped as soon as this fix was applied. This issue might also\n         * only be caused in certain development environments where the usage of a hot module reloader is causing\n         * errors.\n         */\n\n        if (from === undefined && startingUrl && startingUrl.indexOf(to) !== -1) {\n          startingUrl = undefined;\n          return;\n        }\n\n        if (from !== to) {\n          startingUrl = undefined;\n\n          if (activeTransaction) {\n            logger.log(\"[Tracing] Finishing current transaction with op: \" + activeTransaction.op); // If there's an open transaction on the scope, we need to finish it before creating an new one.\n\n            activeTransaction.finish();\n          }\n\n          activeTransaction = startTransaction({\n            name: global.location.pathname,\n            op: 'navigation'\n          });\n        }\n      },\n      type: 'history'\n    });\n  }\n}","map":{"version":3,"sources":["../../src/browser/router.ts"],"names":[],"mappings":"AACA,SAAS,yBAAT,EAAoC,eAApC,EAAqD,MAArD,QAAmE,eAAnE;AAEA,IAAM,MAAM,GAAG,eAAe,EAA9B;AAEA;;AAEG;;AACH,OAAM,SAAU,6BAAV,CACJ,gBADI,EAEJ,0BAFI,EAGJ,gCAHI,EAG4C;AADhD,MAAA,0BAAA,KAAA,KAAA,CAAA,EAAA;AAAA,IAAA,0BAAA,GAAA,IAAA;AAA0C;;AAC1C,MAAA,gCAAA,KAAA,KAAA,CAAA,EAAA;AAAA,IAAA,gCAAA,GAAA,IAAA;AAAgD;;AAEhD,MAAI,CAAC,MAAD,IAAW,CAAC,MAAM,CAAC,QAAvB,EAAiC;AAC/B,IAAA,MAAM,CAAC,IAAP,CAAY,sEAAZ;AACA;AACD;;AAED,MAAI,WAAW,GAAuB,MAAM,CAAC,QAAP,CAAgB,IAAtD;AAEA,MAAI,iBAAJ;;AACA,MAAI,0BAAJ,EAAgC;AAC9B,IAAA,iBAAiB,GAAG,gBAAgB,CAAC;AAAE,MAAA,IAAI,EAAE,MAAM,CAAC,QAAP,CAAgB,QAAxB;AAAkC,MAAA,EAAE,EAAE;AAAtC,KAAD,CAApC;AACD;;AAED,MAAI,gCAAJ,EAAsC;AACpC,IAAA,yBAAyB,CAAC;AACxB,MAAA,QAAQ,EAAE,UAAC,EAAD,EAA4C;YAAzC,EAAA,GAAA,EAAA,CAAA,E;YAAI,IAAA,GAAA,EAAA,CAAA,I;AACf;;;;;;;;AAQG;;AACH,YAAI,IAAI,KAAK,SAAT,IAAsB,WAAtB,IAAqC,WAAW,CAAC,OAAZ,CAAoB,EAApB,MAA4B,CAAC,CAAtE,EAAyE;AACvE,UAAA,WAAW,GAAG,SAAd;AACA;AACD;;AAED,YAAI,IAAI,KAAK,EAAb,EAAiB;AACf,UAAA,WAAW,GAAG,SAAd;;AACA,cAAI,iBAAJ,EAAuB;AACrB,YAAA,MAAM,CAAC,GAAP,CAAW,sDAAoD,iBAAiB,CAAC,EAAjF,EADqB,CAErB;;AACA,YAAA,iBAAiB,CAAC,MAAlB;AACD;;AACD,UAAA,iBAAiB,GAAG,gBAAgB,CAAC;AAAE,YAAA,IAAI,EAAE,MAAM,CAAC,QAAP,CAAgB,QAAxB;AAAkC,YAAA,EAAE,EAAE;AAAtC,WAAD,CAApC;AACD;AACF,OAzBuB;AA0BxB,MAAA,IAAI,EAAE;AA1BkB,KAAD,CAAzB;AA4BD;AACF","sourcesContent":["import { Transaction as TransactionType, TransactionContext } from '@sentry/types';\nimport { addInstrumentationHandler, getGlobalObject, logger } from '@sentry/utils';\n\nconst global = getGlobalObject<Window>();\n\n/**\n * Default function implementing pageload and navigation transactions\n */\nexport function defaultRoutingInstrumentation<T extends TransactionType>(\n  startTransaction: (context: TransactionContext) => T | undefined,\n  startTransactionOnPageLoad: boolean = true,\n  startTransactionOnLocationChange: boolean = true,\n): void {\n  if (!global || !global.location) {\n    logger.warn('Could not initialize routing instrumentation due to invalid location');\n    return;\n  }\n\n  let startingUrl: string | undefined = global.location.href;\n\n  let activeTransaction: T | undefined;\n  if (startTransactionOnPageLoad) {\n    activeTransaction = startTransaction({ name: global.location.pathname, op: 'pageload' });\n  }\n\n  if (startTransactionOnLocationChange) {\n    addInstrumentationHandler({\n      callback: ({ to, from }: { to: string; from?: string }) => {\n        /**\n         * This early return is there to account for some cases where a navigation transaction starts right after\n         * long-running pageload. We make sure that if `from` is undefined and a valid `startingURL` exists, we don't\n         * create an uneccessary navigation transaction.\n         *\n         * This was hard to duplicate, but this behavior stopped as soon as this fix was applied. This issue might also\n         * only be caused in certain development environments where the usage of a hot module reloader is causing\n         * errors.\n         */\n        if (from === undefined && startingUrl && startingUrl.indexOf(to) !== -1) {\n          startingUrl = undefined;\n          return;\n        }\n\n        if (from !== to) {\n          startingUrl = undefined;\n          if (activeTransaction) {\n            logger.log(`[Tracing] Finishing current transaction with op: ${activeTransaction.op}`);\n            // If there's an open transaction on the scope, we need to finish it before creating an new one.\n            activeTransaction.finish();\n          }\n          activeTransaction = startTransaction({ name: global.location.pathname, op: 'navigation' });\n        }\n      },\n      type: 'history',\n    });\n  }\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}