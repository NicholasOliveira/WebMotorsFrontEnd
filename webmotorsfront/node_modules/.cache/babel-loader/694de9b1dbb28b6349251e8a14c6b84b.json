{"ast":null,"code":"/*\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { bindReporter } from './lib/bindReporter';\nimport { getFirstHidden } from './lib/getFirstHidden';\nimport { initMetric } from './lib/initMetric';\nimport { observe } from './lib/observe';\nimport { onHidden } from './lib/onHidden';\nimport { whenInput } from './lib/whenInput';\nexport var getLCP = function (onReport, reportAllChanges) {\n  if (reportAllChanges === void 0) {\n    reportAllChanges = false;\n  }\n\n  var metric = initMetric('LCP');\n  var firstHidden = getFirstHidden();\n  var report;\n\n  var entryHandler = function (entry) {\n    // The startTime attribute returns the value of the renderTime if it is not 0,\n    // and the value of the loadTime otherwise.\n    var value = entry.startTime; // If the page was hidden prior to paint time of the entry,\n    // ignore it and mark the metric as final, otherwise add the entry.\n\n    if (value < firstHidden.timeStamp) {\n      metric.value = value;\n      metric.entries.push(entry);\n    } else {\n      metric.isFinal = true;\n    }\n\n    report();\n  };\n\n  var po = observe('largest-contentful-paint', entryHandler);\n\n  if (po) {\n    report = bindReporter(onReport, metric, po, reportAllChanges);\n\n    var onFinal = function () {\n      if (!metric.isFinal) {\n        po.takeRecords().map(entryHandler);\n        metric.isFinal = true;\n        report();\n      }\n    };\n\n    void whenInput().then(onFinal);\n    onHidden(onFinal, true);\n  }\n};","map":{"version":3,"sources":["../../../src/browser/web-vitals/getLCP.ts"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;AAcG;AAEH,SAAS,YAAT,QAA6B,oBAA7B;AACA,SAAS,cAAT,QAA+B,sBAA/B;AACA,SAAS,UAAT,QAA2B,kBAA3B;AACA,SAAS,OAAT,QAAiD,eAAjD;AACA,SAAS,QAAT,QAAyB,gBAAzB;AACA,SAAS,SAAT,QAA0B,iBAA1B;AAGA,OAAO,IAAM,MAAM,GAAG,UAAC,QAAD,EAA0B,gBAA1B,EAAkD;AAAxB,MAAA,gBAAA,KAAA,KAAA,CAAA,EAAA;AAAA,IAAA,gBAAA,GAAA,KAAA;AAAwB;;AACtE,MAAM,MAAM,GAAG,UAAU,CAAC,KAAD,CAAzB;AACA,MAAM,WAAW,GAAG,cAAc,EAAlC;AAEA,MAAI,MAAJ;;AAEA,MAAM,YAAY,GAAG,UAAC,KAAD,EAAwB;AAC3C;AACA;AACA,QAAM,KAAK,GAAG,KAAK,CAAC,SAApB,CAH2C,CAK3C;AACA;;AACA,QAAI,KAAK,GAAG,WAAW,CAAC,SAAxB,EAAmC;AACjC,MAAA,MAAM,CAAC,KAAP,GAAe,KAAf;AACA,MAAA,MAAM,CAAC,OAAP,CAAe,IAAf,CAAoB,KAApB;AACD,KAHD,MAGO;AACL,MAAA,MAAM,CAAC,OAAP,GAAiB,IAAjB;AACD;;AAED,IAAA,MAAM;AACP,GAfD;;AAiBA,MAAM,EAAE,GAAG,OAAO,CAAC,0BAAD,EAA6B,YAA7B,CAAlB;;AAEA,MAAI,EAAJ,EAAQ;AACN,IAAA,MAAM,GAAG,YAAY,CAAC,QAAD,EAAW,MAAX,EAAmB,EAAnB,EAAuB,gBAAvB,CAArB;;AAEA,QAAM,OAAO,GAAG,YAAA;AACd,UAAI,CAAC,MAAM,CAAC,OAAZ,EAAqB;AACnB,QAAA,EAAE,CAAC,WAAH,GAAiB,GAAjB,CAAqB,YAArB;AACA,QAAA,MAAM,CAAC,OAAP,GAAiB,IAAjB;AACA,QAAA,MAAM;AACP;AACF,KAND;;AAQA,SAAK,SAAS,GAAG,IAAZ,CAAiB,OAAjB,CAAL;AACA,IAAA,QAAQ,CAAC,OAAD,EAAU,IAAV,CAAR;AACD;AACF,CAvCM","sourcesContent":["/*\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { bindReporter } from './lib/bindReporter';\nimport { getFirstHidden } from './lib/getFirstHidden';\nimport { initMetric } from './lib/initMetric';\nimport { observe, PerformanceEntryHandler } from './lib/observe';\nimport { onHidden } from './lib/onHidden';\nimport { whenInput } from './lib/whenInput';\nimport { ReportHandler } from './types';\n\nexport const getLCP = (onReport: ReportHandler, reportAllChanges = false): void => {\n  const metric = initMetric('LCP');\n  const firstHidden = getFirstHidden();\n\n  let report: ReturnType<typeof bindReporter>;\n\n  const entryHandler = (entry: PerformanceEntry): void => {\n    // The startTime attribute returns the value of the renderTime if it is not 0,\n    // and the value of the loadTime otherwise.\n    const value = entry.startTime;\n\n    // If the page was hidden prior to paint time of the entry,\n    // ignore it and mark the metric as final, otherwise add the entry.\n    if (value < firstHidden.timeStamp) {\n      metric.value = value;\n      metric.entries.push(entry);\n    } else {\n      metric.isFinal = true;\n    }\n\n    report();\n  };\n\n  const po = observe('largest-contentful-paint', entryHandler);\n\n  if (po) {\n    report = bindReporter(onReport, metric, po, reportAllChanges);\n\n    const onFinal = (): void => {\n      if (!metric.isFinal) {\n        po.takeRecords().map(entryHandler as PerformanceEntryHandler);\n        metric.isFinal = true;\n        report();\n      }\n    };\n\n    void whenInput().then(onFinal);\n    onHidden(onFinal, true);\n  }\n};\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}