{"ast":null,"code":"import { logger } from '@sentry/utils';\n/**\n * Express integration\n *\n * Provides an request and error handler for Express framework\n * as well as tracing capabilities\n */\n\nvar Express =\n/** @class */\nfunction () {\n  /**\n   * @inheritDoc\n   */\n  function Express(options) {\n    if (options === void 0) {\n      options = {};\n    }\n    /**\n     * @inheritDoc\n     */\n\n\n    this.name = Express.id;\n    this._app = options.app;\n    this._methods = options.methods;\n  }\n  /**\n   * @inheritDoc\n   */\n\n\n  Express.prototype.setupOnce = function () {\n    if (!this._app) {\n      logger.error('ExpressIntegration is missing an Express instance');\n      return;\n    }\n\n    instrumentMiddlewares(this._app);\n    routeMiddlewares(this._app, this._methods);\n  };\n  /**\n   * @inheritDoc\n   */\n\n\n  Express.id = 'Express';\n  return Express;\n}();\n\nexport { Express };\n/**\n * Wraps original middleware function in a tracing call, which stores the info about the call as a span,\n * and finishes it once the middleware is done invoking.\n *\n * Express middlewares have 3 various forms, thus we have to take care of all of them:\n * // sync\n * app.use(function (req, res) { ... })\n * // async\n * app.use(function (req, res, next) { ... })\n * // error handler\n * app.use(function (err, req, res, next) { ... })\n */\n// eslint-disable-next-line @typescript-eslint/ban-types\n\nfunction wrap(fn) {\n  var arity = fn.length;\n\n  switch (arity) {\n    case 2:\n      {\n        return function (req, res) {\n          var transaction = res.__sentry_transaction;\n          addExpressReqToTransaction(transaction, req);\n\n          if (transaction) {\n            var span_1 = transaction.startChild({\n              description: fn.name,\n              op: 'middleware'\n            });\n            res.once('finish', function () {\n              span_1.finish();\n            });\n          } // eslint-disable-next-line prefer-rest-params\n\n\n          return fn.apply(this, arguments);\n        };\n      }\n\n    case 3:\n      {\n        return function (req, res, next) {\n          var transaction = res.__sentry_transaction;\n          addExpressReqToTransaction(transaction, req);\n          var span = transaction && transaction.startChild({\n            description: fn.name,\n            op: 'middleware'\n          });\n          fn.call(this, req, res, function () {\n            if (span) {\n              span.finish();\n            } // eslint-disable-next-line prefer-rest-params\n\n\n            return next.apply(this, arguments);\n          });\n        };\n      }\n\n    case 4:\n      {\n        return function (err, req, res, next) {\n          var transaction = res.__sentry_transaction;\n          addExpressReqToTransaction(transaction, req);\n          var span = transaction && transaction.startChild({\n            description: fn.name,\n            op: 'middleware'\n          });\n          fn.call(this, err, req, res, function () {\n            if (span) {\n              span.finish();\n            } // eslint-disable-next-line prefer-rest-params\n\n\n            return next.apply(this, arguments);\n          });\n        };\n      }\n\n    default:\n      {\n        throw new Error(\"Express middleware takes 2-4 arguments. Got: \" + arity);\n      }\n  }\n}\n/**\n * Set parameterized as transaction name e.g.: `GET /users/:id`\n * Also adds more context data on the transaction from the request\n */\n\n\nfunction addExpressReqToTransaction(transaction, req) {\n  /* eslint-disable @typescript-eslint/no-unsafe-member-access */\n  if (transaction) {\n    if (req.route && req.route.path) {\n      transaction.name = req.method + \" \" + req.route.path;\n    }\n\n    transaction.setData('url', req.originalUrl);\n    transaction.setData('baseUrl', req.baseUrl);\n    transaction.setData('query', req.query);\n  }\n  /* eslint-enable @typescript-eslint/no-unsafe-member-access */\n\n}\n/**\n * Takes all the function arguments passed to the original `app.use` call\n * and wraps every function, as well as array of functions with a call to our `wrap` method.\n * We have to take care of the arrays as well as iterate over all of the arguments,\n * as `app.use` can accept middlewares in few various forms.\n *\n * app.use([<path>], <fn>)\n * app.use([<path>], <fn>, ...<fn>)\n * app.use([<path>], ...<fn>[])\n */\n\n\nfunction wrapUseArgs(args) {\n  return Array.from(args).map(function (arg) {\n    if (typeof arg === 'function') {\n      return wrap(arg);\n    }\n\n    if (Array.isArray(arg)) {\n      return arg.map(function (a) {\n        if (typeof a === 'function') {\n          return wrap(a);\n        }\n\n        return a;\n      });\n    }\n\n    return arg;\n  });\n}\n/**\n * Patches original App to utilize our tracing functionality\n */\n\n\nfunction patchMiddleware(app, method) {\n  var originalAppCallback = app[method];\n\n  app[method] = function () {\n    // eslint-disable-next-line prefer-rest-params\n    return originalAppCallback.apply(this, wrapUseArgs(arguments));\n  };\n\n  return app;\n}\n/**\n * Patches original app.use\n */\n\n\nfunction instrumentMiddlewares(app) {\n  patchMiddleware(app, 'use');\n}\n/**\n * Patches original app.METHOD\n */\n\n\nfunction routeMiddlewares(app, methods) {\n  if (methods === void 0) {\n    methods = [];\n  }\n\n  methods.forEach(function (method) {\n    patchMiddleware(app, method);\n  });\n}","map":{"version":3,"sources":["../../src/integrations/express.ts"],"names":[],"mappings":"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","sourcesContent":["/* eslint-disable @typescript-eslint/no-explicit-any */\nimport { Integration, Transaction } from '@sentry/types';\nimport { logger } from '@sentry/utils';\n\n// Have to manually set types because we are using package-alias\ntype Method =\n  | 'all'\n  | 'get'\n  | 'post'\n  | 'put'\n  | 'delete'\n  | 'patch'\n  | 'options'\n  | 'head'\n  | 'checkout'\n  | 'copy'\n  | 'lock'\n  | 'merge'\n  | 'mkactivity'\n  | 'mkcol'\n  | 'move'\n  | 'm-search'\n  | 'notify'\n  | 'purge'\n  | 'report'\n  | 'search'\n  | 'subscribe'\n  | 'trace'\n  | 'unlock'\n  | 'unsubscribe';\n\ntype Application = {\n  [method in Method | 'use']: (...args: any) => any;\n};\n\ntype ErrorRequestHandler = (...args: any) => any;\ntype RequestHandler = (...args: any) => any;\ntype NextFunction = (...args: any) => any;\n\ninterface Response {\n  once(name: string, callback: () => void): void;\n}\n\n/**\n * Internal helper for `__sentry_transaction`\n * @hidden\n */\ninterface SentryTracingResponse {\n  __sentry_transaction?: Transaction;\n}\n\n/**\n * Express integration\n *\n * Provides an request and error handler for Express framework\n * as well as tracing capabilities\n */\nexport class Express implements Integration {\n  /**\n   * @inheritDoc\n   */\n  public static id: string = 'Express';\n\n  /**\n   * @inheritDoc\n   */\n  public name: string = Express.id;\n\n  /**\n   * Express App instance\n   */\n  private readonly _app?: Application;\n  private readonly _methods?: Method[];\n\n  /**\n   * @inheritDoc\n   */\n  public constructor(options: { app?: Application; methods?: Method[] } = {}) {\n    this._app = options.app;\n    this._methods = options.methods;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public setupOnce(): void {\n    if (!this._app) {\n      logger.error('ExpressIntegration is missing an Express instance');\n      return;\n    }\n    instrumentMiddlewares(this._app);\n    routeMiddlewares(this._app, this._methods);\n  }\n}\n\n/**\n * Wraps original middleware function in a tracing call, which stores the info about the call as a span,\n * and finishes it once the middleware is done invoking.\n *\n * Express middlewares have 3 various forms, thus we have to take care of all of them:\n * // sync\n * app.use(function (req, res) { ... })\n * // async\n * app.use(function (req, res, next) { ... })\n * // error handler\n * app.use(function (err, req, res, next) { ... })\n */\n// eslint-disable-next-line @typescript-eslint/ban-types\nfunction wrap(fn: Function): RequestHandler | ErrorRequestHandler {\n  const arity = fn.length;\n\n  switch (arity) {\n    case 2: {\n      return function(this: NodeJS.Global, req: Request, res: Response & SentryTracingResponse): any {\n        const transaction = res.__sentry_transaction;\n        addExpressReqToTransaction(transaction, req);\n        if (transaction) {\n          const span = transaction.startChild({\n            description: fn.name,\n            op: 'middleware',\n          });\n          res.once('finish', () => {\n            span.finish();\n          });\n        }\n        // eslint-disable-next-line prefer-rest-params\n        return fn.apply(this, arguments);\n      };\n    }\n    case 3: {\n      return function(\n        this: NodeJS.Global,\n        req: Request,\n        res: Response & SentryTracingResponse,\n        next: NextFunction,\n      ): any {\n        const transaction = res.__sentry_transaction;\n        addExpressReqToTransaction(transaction, req);\n        const span =\n          transaction &&\n          transaction.startChild({\n            description: fn.name,\n            op: 'middleware',\n          });\n        fn.call(this, req, res, function(this: NodeJS.Global): any {\n          if (span) {\n            span.finish();\n          }\n          // eslint-disable-next-line prefer-rest-params\n          return next.apply(this, arguments);\n        });\n      };\n    }\n    case 4: {\n      return function(\n        this: NodeJS.Global,\n        err: any,\n        req: Request,\n        res: Response & SentryTracingResponse,\n        next: NextFunction,\n      ): any {\n        const transaction = res.__sentry_transaction;\n        addExpressReqToTransaction(transaction, req);\n        const span =\n          transaction &&\n          transaction.startChild({\n            description: fn.name,\n            op: 'middleware',\n          });\n        fn.call(this, err, req, res, function(this: NodeJS.Global): any {\n          if (span) {\n            span.finish();\n          }\n          // eslint-disable-next-line prefer-rest-params\n          return next.apply(this, arguments);\n        });\n      };\n    }\n    default: {\n      throw new Error(`Express middleware takes 2-4 arguments. Got: ${arity}`);\n    }\n  }\n}\n\n/**\n * Set parameterized as transaction name e.g.: `GET /users/:id`\n * Also adds more context data on the transaction from the request\n */\nfunction addExpressReqToTransaction(transaction: Transaction | undefined, req: any): void {\n  /* eslint-disable @typescript-eslint/no-unsafe-member-access */\n  if (transaction) {\n    if (req.route && req.route.path) {\n      transaction.name = `${req.method} ${req.route.path}`;\n    }\n    transaction.setData('url', req.originalUrl);\n    transaction.setData('baseUrl', req.baseUrl);\n    transaction.setData('query', req.query);\n  }\n  /* eslint-enable @typescript-eslint/no-unsafe-member-access */\n}\n\n/**\n * Takes all the function arguments passed to the original `app.use` call\n * and wraps every function, as well as array of functions with a call to our `wrap` method.\n * We have to take care of the arrays as well as iterate over all of the arguments,\n * as `app.use` can accept middlewares in few various forms.\n *\n * app.use([<path>], <fn>)\n * app.use([<path>], <fn>, ...<fn>)\n * app.use([<path>], ...<fn>[])\n */\nfunction wrapUseArgs(args: IArguments): unknown[] {\n  return Array.from(args).map((arg: unknown) => {\n    if (typeof arg === 'function') {\n      return wrap(arg);\n    }\n\n    if (Array.isArray(arg)) {\n      return arg.map((a: unknown) => {\n        if (typeof a === 'function') {\n          return wrap(a);\n        }\n        return a;\n      });\n    }\n\n    return arg;\n  });\n}\n\n/**\n * Patches original App to utilize our tracing functionality\n */\nfunction patchMiddleware(app: Application, method: Method | 'use'): Application {\n  const originalAppCallback = app[method];\n\n  app[method] = function(): any {\n    // eslint-disable-next-line prefer-rest-params\n    return originalAppCallback.apply(this, wrapUseArgs(arguments));\n  };\n\n  return app;\n}\n\n/**\n * Patches original app.use\n */\nfunction instrumentMiddlewares(app: Application): void {\n  patchMiddleware(app, 'use');\n}\n\n/**\n * Patches original app.METHOD\n */\nfunction routeMiddlewares(app: Application, methods: Method[] = []): void {\n  methods.forEach(function(method: Method) {\n    patchMiddleware(app, method);\n  });\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}