{"ast":null,"code":"import { __assign, __extends, __read, __spread } from \"tslib\";\nimport { BaseClient } from '@sentry/core';\nimport { getGlobalObject, logger } from '@sentry/utils';\nimport { BrowserBackend } from './backend';\nimport { injectReportDialog } from './helpers';\nimport { Breadcrumbs } from './integrations';\nimport { SDK_NAME, SDK_VERSION } from './version';\n/**\n * The Sentry Browser SDK Client.\n *\n * @see BrowserOptions for documentation on configuration options.\n * @see SentryClient for usage documentation.\n */\n\nvar BrowserClient =\n/** @class */\nfunction (_super) {\n  __extends(BrowserClient, _super);\n  /**\n   * Creates a new Browser SDK instance.\n   *\n   * @param options Configuration options for this SDK.\n   */\n\n\n  function BrowserClient(options) {\n    if (options === void 0) {\n      options = {};\n    }\n\n    return _super.call(this, BrowserBackend, options) || this;\n  }\n  /**\n   * Show a report dialog to the user to send feedback to a specific event.\n   *\n   * @param options Set individual options for the dialog\n   */\n\n\n  BrowserClient.prototype.showReportDialog = function (options) {\n    if (options === void 0) {\n      options = {};\n    } // doesn't work without a document (React Native)\n\n\n    var document = getGlobalObject().document;\n\n    if (!document) {\n      return;\n    }\n\n    if (!this._isEnabled()) {\n      logger.error('Trying to call showReportDialog with Sentry Client disabled');\n      return;\n    }\n\n    injectReportDialog(__assign(__assign({}, options), {\n      dsn: options.dsn || this.getDsn()\n    }));\n  };\n  /**\n   * @inheritDoc\n   */\n\n\n  BrowserClient.prototype._prepareEvent = function (event, scope, hint) {\n    event.platform = event.platform || 'javascript';\n    event.sdk = __assign(__assign({}, event.sdk), {\n      name: SDK_NAME,\n      packages: __spread(event.sdk && event.sdk.packages || [], [{\n        name: 'npm:@sentry/browser',\n        version: SDK_VERSION\n      }]),\n      version: SDK_VERSION\n    });\n    return _super.prototype._prepareEvent.call(this, event, scope, hint);\n  };\n  /**\n   * @inheritDoc\n   */\n\n\n  BrowserClient.prototype._sendEvent = function (event) {\n    var integration = this.getIntegration(Breadcrumbs);\n\n    if (integration) {\n      integration.addSentryBreadcrumb(event);\n    }\n\n    _super.prototype._sendEvent.call(this, event);\n  };\n\n  return BrowserClient;\n}(BaseClient);\n\nexport { BrowserClient };","map":{"version":3,"sources":["../src/client.ts"],"names":[],"mappings":";AAAA,SAAS,UAAT,QAAkC,cAAlC;AAEA,SAAS,eAAT,EAA0B,MAA1B,QAAwC,eAAxC;AAEA,SAAS,cAAT,QAA+C,WAA/C;AACA,SAAS,kBAAT,QAAwD,WAAxD;AACA,SAAS,WAAT,QAA4B,gBAA5B;AACA,SAAS,QAAT,EAAmB,WAAnB,QAAsC,WAAtC;AAEA;;;;;AAKG;;AACH,IAAA,aAAA;AAAA;AAAA,UAAA,MAAA,EAAA;AAAmC,EAAA,SAAA,CAAA,aAAA,EAAA,MAAA,CAAA;AACjC;;;;AAIG;;;AACH,WAAA,aAAA,CAAmB,OAAnB,EAA+C;AAA5B,QAAA,OAAA,KAAA,KAAA,CAAA,EAAA;AAAA,MAAA,OAAA,GAAA,EAAA;AAA4B;;WAC7C,MAAA,CAAA,IAAA,CAAA,IAAA,EAAM,cAAN,EAAsB,OAAtB,KAA8B,I;AAC/B;AAED;;;;AAIG;;;AACI,EAAA,aAAA,CAAA,SAAA,CAAA,gBAAA,GAAP,UAAwB,OAAxB,EAAyD;AAAjC,QAAA,OAAA,KAAA,KAAA,CAAA,EAAA;AAAA,MAAA,OAAA,GAAA,EAAA;AAAiC,KAAA,CACvD;;;AACA,QAAM,QAAQ,GAAG,eAAe,GAAW,QAA3C;;AACA,QAAI,CAAC,QAAL,EAAe;AACb;AACD;;AAED,QAAI,CAAC,KAAK,UAAL,EAAL,EAAwB;AACtB,MAAA,MAAM,CAAC,KAAP,CAAa,6DAAb;AACA;AACD;;AAED,IAAA,kBAAkB,CAAA,QAAA,CAAA,QAAA,CAAA,EAAA,EACb,OADa,CAAA,EACN;AACV,MAAA,GAAG,EAAE,OAAO,CAAC,GAAR,IAAe,KAAK,MAAL;AADV,KADM,CAAA,CAAlB;AAID,GAhBM;AAkBP;;AAEG;;;AACO,EAAA,aAAA,CAAA,SAAA,CAAA,aAAA,GAAV,UAAwB,KAAxB,EAAsC,KAAtC,EAAqD,IAArD,EAAqE;AACnE,IAAA,KAAK,CAAC,QAAN,GAAiB,KAAK,CAAC,QAAN,IAAkB,YAAnC;AACA,IAAA,KAAK,CAAC,GAAN,GAAS,QAAA,CAAA,QAAA,CAAA,EAAA,EACJ,KAAK,CAAC,GADF,CAAA,EACK;AACZ,MAAA,IAAI,EAAE,QADM;AAEZ,MAAA,QAAQ,EAAA,QAAA,CACD,KAAK,CAAC,GAAN,IAAa,KAAK,CAAC,GAAN,CAAU,QAAxB,IAAqC,EADnC,EACsC,CAC5C;AACE,QAAA,IAAI,EAAE,qBADR;AAEE,QAAA,OAAO,EAAE;AAFX,OAD4C,CADtC,CAFI;AASZ,MAAA,OAAO,EAAE;AATG,KADL,CAAT;AAaA,WAAO,MAAA,CAAA,SAAA,CAAM,aAAN,CAAmB,IAAnB,CAAmB,IAAnB,EAAoB,KAApB,EAA2B,KAA3B,EAAkC,IAAlC,CAAP;AACD,GAhBS;AAkBV;;AAEG;;;AACO,EAAA,aAAA,CAAA,SAAA,CAAA,UAAA,GAAV,UAAqB,KAArB,EAAiC;AAC/B,QAAM,WAAW,GAAG,KAAK,cAAL,CAAoB,WAApB,CAApB;;AACA,QAAI,WAAJ,EAAiB;AACf,MAAA,WAAW,CAAC,mBAAZ,CAAgC,KAAhC;AACD;;AACD,IAAA,MAAA,CAAA,SAAA,CAAM,UAAN,CAAgB,IAAhB,CAAgB,IAAhB,EAAiB,KAAjB;AACD,GANS;;AAOZ,SAAA,aAAA;AAAC,CAhED,CAAmC,UAAnC,CAAA","sourcesContent":["import { BaseClient, Scope } from '@sentry/core';\nimport { Event, EventHint } from '@sentry/types';\nimport { getGlobalObject, logger } from '@sentry/utils';\n\nimport { BrowserBackend, BrowserOptions } from './backend';\nimport { injectReportDialog, ReportDialogOptions } from './helpers';\nimport { Breadcrumbs } from './integrations';\nimport { SDK_NAME, SDK_VERSION } from './version';\n\n/**\n * The Sentry Browser SDK Client.\n *\n * @see BrowserOptions for documentation on configuration options.\n * @see SentryClient for usage documentation.\n */\nexport class BrowserClient extends BaseClient<BrowserBackend, BrowserOptions> {\n  /**\n   * Creates a new Browser SDK instance.\n   *\n   * @param options Configuration options for this SDK.\n   */\n  public constructor(options: BrowserOptions = {}) {\n    super(BrowserBackend, options);\n  }\n\n  /**\n   * Show a report dialog to the user to send feedback to a specific event.\n   *\n   * @param options Set individual options for the dialog\n   */\n  public showReportDialog(options: ReportDialogOptions = {}): void {\n    // doesn't work without a document (React Native)\n    const document = getGlobalObject<Window>().document;\n    if (!document) {\n      return;\n    }\n\n    if (!this._isEnabled()) {\n      logger.error('Trying to call showReportDialog with Sentry Client disabled');\n      return;\n    }\n\n    injectReportDialog({\n      ...options,\n      dsn: options.dsn || this.getDsn(),\n    });\n  }\n\n  /**\n   * @inheritDoc\n   */\n  protected _prepareEvent(event: Event, scope?: Scope, hint?: EventHint): PromiseLike<Event | null> {\n    event.platform = event.platform || 'javascript';\n    event.sdk = {\n      ...event.sdk,\n      name: SDK_NAME,\n      packages: [\n        ...((event.sdk && event.sdk.packages) || []),\n        {\n          name: 'npm:@sentry/browser',\n          version: SDK_VERSION,\n        },\n      ],\n      version: SDK_VERSION,\n    };\n\n    return super._prepareEvent(event, scope, hint);\n  }\n\n  /**\n   * @inheritDoc\n   */\n  protected _sendEvent(event: Event): void {\n    const integration = this.getIntegration(Breadcrumbs);\n    if (integration) {\n      integration.addSentryBreadcrumb(event);\n    }\n    super._sendEvent(event);\n  }\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}