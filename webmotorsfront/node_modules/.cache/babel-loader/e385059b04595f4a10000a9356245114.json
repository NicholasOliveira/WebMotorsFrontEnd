{"ast":null,"code":"/*\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { bindReporter } from './lib/bindReporter';\nimport { initMetric } from './lib/initMetric';\nimport { observe } from './lib/observe';\nimport { onHidden } from './lib/onHidden';\nexport var getCLS = function (onReport, reportAllChanges) {\n  if (reportAllChanges === void 0) {\n    reportAllChanges = false;\n  }\n\n  var metric = initMetric('CLS', 0);\n  var report;\n\n  var entryHandler = function (entry) {\n    // Only count layout shifts without recent user input.\n    if (!entry.hadRecentInput) {\n      metric.value += entry.value;\n      metric.entries.push(entry);\n      report();\n    }\n  };\n\n  var po = observe('layout-shift', entryHandler);\n\n  if (po) {\n    report = bindReporter(onReport, metric, po, reportAllChanges);\n    onHidden(function (_a) {\n      var isUnloading = _a.isUnloading;\n      po.takeRecords().map(entryHandler);\n\n      if (isUnloading) {\n        metric.isFinal = true;\n      }\n\n      report();\n    });\n  }\n};","map":{"version":3,"sources":["../../../src/browser/web-vitals/getCLS.ts"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;AAcG;AAEH,SAAS,YAAT,QAA6B,oBAA7B;AACA,SAAS,UAAT,QAA2B,kBAA3B;AACA,SAAS,OAAT,QAAiD,eAAjD;AACA,SAAS,QAAT,QAAyB,gBAAzB;AASA,OAAO,IAAM,MAAM,GAAG,UAAC,QAAD,EAA0B,gBAA1B,EAAkD;AAAxB,MAAA,gBAAA,KAAA,KAAA,CAAA,EAAA;AAAA,IAAA,gBAAA,GAAA,KAAA;AAAwB;;AACtE,MAAM,MAAM,GAAG,UAAU,CAAC,KAAD,EAAQ,CAAR,CAAzB;AAEA,MAAI,MAAJ;;AAEA,MAAM,YAAY,GAAG,UAAC,KAAD,EAAmB;AACtC;AACA,QAAI,CAAC,KAAK,CAAC,cAAX,EAA2B;AACxB,MAAA,MAAM,CAAC,KAAP,IAA2B,KAAK,CAAC,KAAjC;AACD,MAAA,MAAM,CAAC,OAAP,CAAe,IAAf,CAAoB,KAApB;AACA,MAAA,MAAM;AACP;AACF,GAPD;;AASA,MAAM,EAAE,GAAG,OAAO,CAAC,cAAD,EAAiB,YAAjB,CAAlB;;AACA,MAAI,EAAJ,EAAQ;AACN,IAAA,MAAM,GAAG,YAAY,CAAC,QAAD,EAAW,MAAX,EAAmB,EAAnB,EAAuB,gBAAvB,CAArB;AAEA,IAAA,QAAQ,CAAC,UAAC,EAAD,EAAgB;UAAb,WAAA,GAAA,EAAA,CAAA,W;AACV,MAAA,EAAE,CAAC,WAAH,GAAiB,GAAjB,CAAqB,YAArB;;AAEA,UAAI,WAAJ,EAAiB;AACf,QAAA,MAAM,CAAC,OAAP,GAAiB,IAAjB;AACD;;AACD,MAAA,MAAM;AACP,KAPO,CAAR;AAQD;AACF,CA3BM","sourcesContent":["/*\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { bindReporter } from './lib/bindReporter';\nimport { initMetric } from './lib/initMetric';\nimport { observe, PerformanceEntryHandler } from './lib/observe';\nimport { onHidden } from './lib/onHidden';\nimport { ReportHandler } from './types';\n\n// https://wicg.github.io/layout-instability/#sec-layout-shift\ninterface LayoutShift extends PerformanceEntry {\n  value: number;\n  hadRecentInput: boolean;\n}\n\nexport const getCLS = (onReport: ReportHandler, reportAllChanges = false): void => {\n  const metric = initMetric('CLS', 0);\n\n  let report: ReturnType<typeof bindReporter>;\n\n  const entryHandler = (entry: LayoutShift): void => {\n    // Only count layout shifts without recent user input.\n    if (!entry.hadRecentInput) {\n      (metric.value as number) += entry.value;\n      metric.entries.push(entry);\n      report();\n    }\n  };\n\n  const po = observe('layout-shift', entryHandler as PerformanceEntryHandler);\n  if (po) {\n    report = bindReporter(onReport, metric, po, reportAllChanges);\n\n    onHidden(({ isUnloading }) => {\n      po.takeRecords().map(entryHandler as PerformanceEntryHandler);\n\n      if (isUnloading) {\n        metric.isFinal = true;\n      }\n      report();\n    });\n  }\n};\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}