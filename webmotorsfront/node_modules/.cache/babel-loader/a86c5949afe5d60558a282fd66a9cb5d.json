{"ast":null,"code":"/*\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { getGlobalObject } from '@sentry/utils';\nimport { initMetric } from './lib/initMetric';\nvar global = getGlobalObject();\n\nvar afterLoad = function (callback) {\n  if (document.readyState === 'complete') {\n    // Queue a task so the callback runs after `loadEventEnd`.\n    setTimeout(callback, 0);\n  } else {\n    // Use `pageshow` so the callback runs after `loadEventEnd`.\n    addEventListener('pageshow', callback);\n  }\n};\n\nvar getNavigationEntryFromPerformanceTiming = function () {\n  // Really annoying that TypeScript errors when using `PerformanceTiming`.\n  // Note: browsers that do not support navigation entries will fall back to using performance.timing\n  // (with the timestamps converted from epoch time to DOMHighResTimeStamp).\n  // eslint-disable-next-line deprecation/deprecation\n  var timing = global.performance.timing;\n  var navigationEntry = {\n    entryType: 'navigation',\n    startTime: 0\n  };\n\n  for (var key in timing) {\n    if (key !== 'navigationStart' && key !== 'toJSON') {\n      navigationEntry[key] = Math.max(timing[key] - timing.navigationStart, 0);\n    }\n  }\n\n  return navigationEntry;\n};\n\nexport var getTTFB = function (onReport) {\n  var metric = initMetric('TTFB');\n  afterLoad(function () {\n    try {\n      // Use the NavigationTiming L2 entry if available.\n      var navigationEntry = global.performance.getEntriesByType('navigation')[0] || getNavigationEntryFromPerformanceTiming();\n      metric.value = metric.delta = navigationEntry.responseStart;\n      metric.entries = [navigationEntry];\n      metric.isFinal = true;\n      onReport(metric);\n    } catch (error) {// Do nothing.\n    }\n  });\n};","map":{"version":3,"sources":["../../../src/browser/web-vitals/getTTFB.ts"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;AAcG;AAEH,SAAS,eAAT,QAAgC,eAAhC;AAEA,SAAS,UAAT,QAA2B,kBAA3B;AAGA,IAAM,MAAM,GAAG,eAAe,EAA9B;;AAkDA,IAAM,SAAS,GAAG,UAAC,QAAD,EAAqB;AACrC,MAAI,QAAQ,CAAC,UAAT,KAAwB,UAA5B,EAAwC;AACtC;AACA,IAAA,UAAU,CAAC,QAAD,EAAW,CAAX,CAAV;AACD,GAHD,MAGO;AACL;AACA,IAAA,gBAAgB,CAAC,UAAD,EAAa,QAAb,CAAhB;AACD;AACF,CARD;;AAUA,IAAM,uCAAuC,GAAG,YAAA;AAC9C;AACA;AACA;AACA;AACA,MAAM,MAAM,GAAG,MAAM,CAAC,WAAP,CAAmB,MAAlC;AAEA,MAAM,eAAe,GAAwB;AAC3C,IAAA,SAAS,EAAE,YADgC;AAE3C,IAAA,SAAS,EAAE;AAFgC,GAA7C;;AAKA,OAAK,IAAM,GAAX,IAAkB,MAAlB,EAA0B;AACxB,QAAI,GAAG,KAAK,iBAAR,IAA6B,GAAG,KAAK,QAAzC,EAAmD;AACjD,MAAA,eAAe,CAAC,GAAD,CAAf,GAAgD,IAAI,CAAC,GAAL,CAC9C,MAAM,CAAC,GAAD,CAAN,GAAuC,MAAM,CAAC,eADA,EAE9C,CAF8C,CAAhD;AAID;AACF;;AACD,SAAO,eAAP;AACD,CArBD;;AAuBA,OAAO,IAAM,OAAO,GAAG,UAAC,QAAD,EAAwB;AAC7C,MAAM,MAAM,GAAG,UAAU,CAAC,MAAD,CAAzB;AAEA,EAAA,SAAS,CAAC,YAAA;AACR,QAAI;AACF;AACA,UAAM,eAAe,GACnB,MAAM,CAAC,WAAP,CAAmB,gBAAnB,CAAoC,YAApC,EAAkD,CAAlD,KAAwD,uCAAuC,EADjG;AAGA,MAAA,MAAM,CAAC,KAAP,GAAe,MAAM,CAAC,KAAP,GAAgB,eAA+C,CAAC,aAA/E;AAEA,MAAA,MAAM,CAAC,OAAP,GAAiB,CAAC,eAAD,CAAjB;AACA,MAAA,MAAM,CAAC,OAAP,GAAiB,IAAjB;AAEA,MAAA,QAAQ,CAAC,MAAD,CAAR;AACD,KAXD,CAWE,OAAO,KAAP,EAAc,CACd;AACD;AACF,GAfQ,CAAT;AAgBD,CAnBM","sourcesContent":["/*\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { getGlobalObject } from '@sentry/utils';\n\nimport { initMetric } from './lib/initMetric';\nimport { ReportHandler } from './types';\n\nconst global = getGlobalObject<Window>();\n\ninterface NavigationEntryShim {\n  // From `PerformanceNavigationTimingEntry`.\n  entryType: string;\n  startTime: number;\n\n  // From `performance.timing`.\n  connectEnd?: number;\n  connectStart?: number;\n  domComplete?: number;\n  domContentLoadedEventEnd?: number;\n  domContentLoadedEventStart?: number;\n  domInteractive?: number;\n  domainLookupEnd?: number;\n  domainLookupStart?: number;\n  fetchStart?: number;\n  loadEventEnd?: number;\n  loadEventStart?: number;\n  redirectEnd?: number;\n  redirectStart?: number;\n  requestStart?: number;\n  responseEnd?: number;\n  responseStart?: number;\n  secureConnectionStart?: number;\n  unloadEventEnd?: number;\n  unloadEventStart?: number;\n}\n\ntype PerformanceTimingKeys =\n  | 'connectEnd'\n  | 'connectStart'\n  | 'domComplete'\n  | 'domContentLoadedEventEnd'\n  | 'domContentLoadedEventStart'\n  | 'domInteractive'\n  | 'domainLookupEnd'\n  | 'domainLookupStart'\n  | 'fetchStart'\n  | 'loadEventEnd'\n  | 'loadEventStart'\n  | 'redirectEnd'\n  | 'redirectStart'\n  | 'requestStart'\n  | 'responseEnd'\n  | 'responseStart'\n  | 'secureConnectionStart'\n  | 'unloadEventEnd'\n  | 'unloadEventStart';\n\nconst afterLoad = (callback: () => void): void => {\n  if (document.readyState === 'complete') {\n    // Queue a task so the callback runs after `loadEventEnd`.\n    setTimeout(callback, 0);\n  } else {\n    // Use `pageshow` so the callback runs after `loadEventEnd`.\n    addEventListener('pageshow', callback);\n  }\n};\n\nconst getNavigationEntryFromPerformanceTiming = (): PerformanceNavigationTiming => {\n  // Really annoying that TypeScript errors when using `PerformanceTiming`.\n  // Note: browsers that do not support navigation entries will fall back to using performance.timing\n  // (with the timestamps converted from epoch time to DOMHighResTimeStamp).\n  // eslint-disable-next-line deprecation/deprecation\n  const timing = global.performance.timing;\n\n  const navigationEntry: NavigationEntryShim = {\n    entryType: 'navigation',\n    startTime: 0,\n  };\n\n  for (const key in timing) {\n    if (key !== 'navigationStart' && key !== 'toJSON') {\n      navigationEntry[key as PerformanceTimingKeys] = Math.max(\n        timing[key as PerformanceTimingKeys] - timing.navigationStart,\n        0,\n      );\n    }\n  }\n  return navigationEntry as PerformanceNavigationTiming;\n};\n\nexport const getTTFB = (onReport: ReportHandler): void => {\n  const metric = initMetric('TTFB');\n\n  afterLoad(() => {\n    try {\n      // Use the NavigationTiming L2 entry if available.\n      const navigationEntry =\n        global.performance.getEntriesByType('navigation')[0] || getNavigationEntryFromPerformanceTiming();\n\n      metric.value = metric.delta = (navigationEntry as PerformanceNavigationTiming).responseStart;\n\n      metric.entries = [navigationEntry];\n      metric.isFinal = true;\n\n      onReport(metric);\n    } catch (error) {\n      // Do nothing.\n    }\n  });\n};\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}