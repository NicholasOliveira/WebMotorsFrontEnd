{"ast":null,"code":"import { __assign } from \"tslib\";\nimport { dropUndefinedKeys, timestampWithMs, uuid4 } from '@sentry/utils';\nimport { SpanStatus } from './spanstatus';\n/**\n * Keeps track of finished spans for a given transaction\n * @internal\n * @hideconstructor\n * @hidden\n */\n\nvar SpanRecorder =\n/** @class */\nfunction () {\n  function SpanRecorder(maxlen) {\n    if (maxlen === void 0) {\n      maxlen = 1000;\n    }\n\n    this.spans = [];\n    this._maxlen = maxlen;\n  }\n  /**\n   * This is just so that we don't run out of memory while recording a lot\n   * of spans. At some point we just stop and flush out the start of the\n   * trace tree (i.e.the first n spans with the smallest\n   * start_timestamp).\n   */\n\n\n  SpanRecorder.prototype.add = function (span) {\n    if (this.spans.length > this._maxlen) {\n      span.spanRecorder = undefined;\n    } else {\n      this.spans.push(span);\n    }\n  };\n\n  return SpanRecorder;\n}();\n\nexport { SpanRecorder };\n/**\n * Span contains all data about a span\n */\n\nvar Span =\n/** @class */\nfunction () {\n  /**\n   * You should never call the constructor manually, always use `Sentry.startTransaction()`\n   * or call `startChild()` on an existing span.\n   * @internal\n   * @hideconstructor\n   * @hidden\n   */\n  function Span(spanContext) {\n    /**\n     * @inheritDoc\n     */\n    this.traceId = uuid4();\n    /**\n     * @inheritDoc\n     */\n\n    this.spanId = uuid4().substring(16);\n    /**\n     * Timestamp in seconds when the span was created.\n     */\n\n    this.startTimestamp = timestampWithMs();\n    /**\n     * @inheritDoc\n     */\n\n    this.tags = {};\n    /**\n     * @inheritDoc\n     */\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n\n    this.data = {};\n\n    if (!spanContext) {\n      return this;\n    }\n\n    if (spanContext.traceId) {\n      this.traceId = spanContext.traceId;\n    }\n\n    if (spanContext.spanId) {\n      this.spanId = spanContext.spanId;\n    }\n\n    if (spanContext.parentSpanId) {\n      this.parentSpanId = spanContext.parentSpanId;\n    } // We want to include booleans as well here\n\n\n    if ('sampled' in spanContext) {\n      this.sampled = spanContext.sampled;\n    }\n\n    if (spanContext.op) {\n      this.op = spanContext.op;\n    }\n\n    if (spanContext.description) {\n      this.description = spanContext.description;\n    }\n\n    if (spanContext.data) {\n      this.data = spanContext.data;\n    }\n\n    if (spanContext.tags) {\n      this.tags = spanContext.tags;\n    }\n\n    if (spanContext.status) {\n      this.status = spanContext.status;\n    }\n\n    if (spanContext.startTimestamp) {\n      this.startTimestamp = spanContext.startTimestamp;\n    }\n\n    if (spanContext.endTimestamp) {\n      this.endTimestamp = spanContext.endTimestamp;\n    }\n  }\n  /**\n   * @inheritDoc\n   * @deprecated\n   */\n\n\n  Span.prototype.child = function (spanContext) {\n    return this.startChild(spanContext);\n  };\n  /**\n   * @inheritDoc\n   */\n\n\n  Span.prototype.startChild = function (spanContext) {\n    var childSpan = new Span(__assign(__assign({}, spanContext), {\n      parentSpanId: this.spanId,\n      sampled: this.sampled,\n      traceId: this.traceId\n    }));\n    childSpan.spanRecorder = this.spanRecorder;\n\n    if (childSpan.spanRecorder) {\n      childSpan.spanRecorder.add(childSpan);\n    }\n\n    childSpan.transaction = this.transaction;\n    return childSpan;\n  };\n  /**\n   * @inheritDoc\n   */\n\n\n  Span.prototype.setTag = function (key, value) {\n    var _a;\n\n    this.tags = __assign(__assign({}, this.tags), (_a = {}, _a[key] = value, _a));\n    return this;\n  };\n  /**\n   * @inheritDoc\n   */\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any, @typescript-eslint/explicit-module-boundary-types\n\n\n  Span.prototype.setData = function (key, value) {\n    var _a;\n\n    this.data = __assign(__assign({}, this.data), (_a = {}, _a[key] = value, _a));\n    return this;\n  };\n  /**\n   * @inheritDoc\n   */\n\n\n  Span.prototype.setStatus = function (value) {\n    this.status = value;\n    return this;\n  };\n  /**\n   * @inheritDoc\n   */\n\n\n  Span.prototype.setHttpStatus = function (httpStatus) {\n    this.setTag('http.status_code', String(httpStatus));\n    var spanStatus = SpanStatus.fromHttpCode(httpStatus);\n\n    if (spanStatus !== SpanStatus.UnknownError) {\n      this.setStatus(spanStatus);\n    }\n\n    return this;\n  };\n  /**\n   * @inheritDoc\n   */\n\n\n  Span.prototype.isSuccess = function () {\n    return this.status === SpanStatus.Ok;\n  };\n  /**\n   * @inheritDoc\n   */\n\n\n  Span.prototype.finish = function (endTimestamp) {\n    this.endTimestamp = typeof endTimestamp === 'number' ? endTimestamp : timestampWithMs();\n  };\n  /**\n   * @inheritDoc\n   */\n\n\n  Span.prototype.toTraceparent = function () {\n    var sampledString = '';\n\n    if (this.sampled !== undefined) {\n      sampledString = this.sampled ? '-1' : '-0';\n    }\n\n    return this.traceId + \"-\" + this.spanId + sampledString;\n  };\n  /**\n   * @inheritDoc\n   */\n\n\n  Span.prototype.getTraceContext = function () {\n    return dropUndefinedKeys({\n      data: Object.keys(this.data).length > 0 ? this.data : undefined,\n      description: this.description,\n      op: this.op,\n      parent_span_id: this.parentSpanId,\n      span_id: this.spanId,\n      status: this.status,\n      tags: Object.keys(this.tags).length > 0 ? this.tags : undefined,\n      trace_id: this.traceId\n    });\n  };\n  /**\n   * @inheritDoc\n   */\n\n\n  Span.prototype.toJSON = function () {\n    return dropUndefinedKeys({\n      data: Object.keys(this.data).length > 0 ? this.data : undefined,\n      description: this.description,\n      op: this.op,\n      parent_span_id: this.parentSpanId,\n      span_id: this.spanId,\n      start_timestamp: this.startTimestamp,\n      status: this.status,\n      tags: Object.keys(this.tags).length > 0 ? this.tags : undefined,\n      timestamp: this.endTimestamp,\n      trace_id: this.traceId\n    });\n  };\n\n  return Span;\n}();\n\nexport { Span };","map":{"version":3,"sources":["../src/span.ts"],"names":[],"mappings":"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","sourcesContent":["/* eslint-disable max-lines */\nimport { Span as SpanInterface, SpanContext, Transaction } from '@sentry/types';\nimport { dropUndefinedKeys, timestampWithMs, uuid4 } from '@sentry/utils';\n\nimport { SpanStatus } from './spanstatus';\n\n/**\n * Keeps track of finished spans for a given transaction\n * @internal\n * @hideconstructor\n * @hidden\n */\nexport class SpanRecorder {\n  public spans: Span[] = [];\n\n  private readonly _maxlen: number;\n\n  public constructor(maxlen: number = 1000) {\n    this._maxlen = maxlen;\n  }\n\n  /**\n   * This is just so that we don't run out of memory while recording a lot\n   * of spans. At some point we just stop and flush out the start of the\n   * trace tree (i.e.the first n spans with the smallest\n   * start_timestamp).\n   */\n  public add(span: Span): void {\n    if (this.spans.length > this._maxlen) {\n      span.spanRecorder = undefined;\n    } else {\n      this.spans.push(span);\n    }\n  }\n}\n\n/**\n * Span contains all data about a span\n */\nexport class Span implements SpanInterface {\n  /**\n   * @inheritDoc\n   */\n  public traceId: string = uuid4();\n\n  /**\n   * @inheritDoc\n   */\n  public spanId: string = uuid4().substring(16);\n\n  /**\n   * @inheritDoc\n   */\n  public parentSpanId?: string;\n\n  /**\n   * Internal keeper of the status\n   */\n  public status?: SpanStatus | string;\n\n  /**\n   * @inheritDoc\n   */\n  public sampled?: boolean;\n\n  /**\n   * Timestamp in seconds when the span was created.\n   */\n  public startTimestamp: number = timestampWithMs();\n\n  /**\n   * Timestamp in seconds when the span ended.\n   */\n  public endTimestamp?: number;\n\n  /**\n   * @inheritDoc\n   */\n  public op?: string;\n\n  /**\n   * @inheritDoc\n   */\n  public description?: string;\n\n  /**\n   * @inheritDoc\n   */\n  public tags: { [key: string]: string } = {};\n\n  /**\n   * @inheritDoc\n   */\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  public data: { [key: string]: any } = {};\n\n  /**\n   * List of spans that were finalized\n   */\n  public spanRecorder?: SpanRecorder;\n\n  /**\n   * @inheritDoc\n   */\n  public transaction?: Transaction;\n\n  /**\n   * You should never call the constructor manually, always use `Sentry.startTransaction()`\n   * or call `startChild()` on an existing span.\n   * @internal\n   * @hideconstructor\n   * @hidden\n   */\n  public constructor(spanContext?: SpanContext) {\n    if (!spanContext) {\n      return this;\n    }\n    if (spanContext.traceId) {\n      this.traceId = spanContext.traceId;\n    }\n    if (spanContext.spanId) {\n      this.spanId = spanContext.spanId;\n    }\n    if (spanContext.parentSpanId) {\n      this.parentSpanId = spanContext.parentSpanId;\n    }\n    // We want to include booleans as well here\n    if ('sampled' in spanContext) {\n      this.sampled = spanContext.sampled;\n    }\n    if (spanContext.op) {\n      this.op = spanContext.op;\n    }\n    if (spanContext.description) {\n      this.description = spanContext.description;\n    }\n    if (spanContext.data) {\n      this.data = spanContext.data;\n    }\n    if (spanContext.tags) {\n      this.tags = spanContext.tags;\n    }\n    if (spanContext.status) {\n      this.status = spanContext.status;\n    }\n    if (spanContext.startTimestamp) {\n      this.startTimestamp = spanContext.startTimestamp;\n    }\n    if (spanContext.endTimestamp) {\n      this.endTimestamp = spanContext.endTimestamp;\n    }\n  }\n\n  /**\n   * @inheritDoc\n   * @deprecated\n   */\n  public child(\n    spanContext?: Pick<SpanContext, Exclude<keyof SpanContext, 'spanId' | 'sampled' | 'traceId' | 'parentSpanId'>>,\n  ): Span {\n    return this.startChild(spanContext);\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public startChild(\n    spanContext?: Pick<SpanContext, Exclude<keyof SpanContext, 'spanId' | 'sampled' | 'traceId' | 'parentSpanId'>>,\n  ): Span {\n    const childSpan = new Span({\n      ...spanContext,\n      parentSpanId: this.spanId,\n      sampled: this.sampled,\n      traceId: this.traceId,\n    });\n\n    childSpan.spanRecorder = this.spanRecorder;\n    if (childSpan.spanRecorder) {\n      childSpan.spanRecorder.add(childSpan);\n    }\n\n    childSpan.transaction = this.transaction;\n\n    return childSpan;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public setTag(key: string, value: string): this {\n    this.tags = { ...this.tags, [key]: value };\n    return this;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any, @typescript-eslint/explicit-module-boundary-types\n  public setData(key: string, value: any): this {\n    this.data = { ...this.data, [key]: value };\n    return this;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public setStatus(value: SpanStatus): this {\n    this.status = value;\n    return this;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public setHttpStatus(httpStatus: number): this {\n    this.setTag('http.status_code', String(httpStatus));\n    const spanStatus = SpanStatus.fromHttpCode(httpStatus);\n    if (spanStatus !== SpanStatus.UnknownError) {\n      this.setStatus(spanStatus);\n    }\n    return this;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public isSuccess(): boolean {\n    return this.status === SpanStatus.Ok;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public finish(endTimestamp?: number): void {\n    this.endTimestamp = typeof endTimestamp === 'number' ? endTimestamp : timestampWithMs();\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public toTraceparent(): string {\n    let sampledString = '';\n    if (this.sampled !== undefined) {\n      sampledString = this.sampled ? '-1' : '-0';\n    }\n    return `${this.traceId}-${this.spanId}${sampledString}`;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public getTraceContext(): {\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    data?: { [key: string]: any };\n    description?: string;\n    op?: string;\n    parent_span_id?: string;\n    span_id: string;\n    status?: string;\n    tags?: { [key: string]: string };\n    trace_id: string;\n  } {\n    return dropUndefinedKeys({\n      data: Object.keys(this.data).length > 0 ? this.data : undefined,\n      description: this.description,\n      op: this.op,\n      parent_span_id: this.parentSpanId,\n      span_id: this.spanId,\n      status: this.status,\n      tags: Object.keys(this.tags).length > 0 ? this.tags : undefined,\n      trace_id: this.traceId,\n    });\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public toJSON(): {\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    data?: { [key: string]: any };\n    description?: string;\n    op?: string;\n    parent_span_id?: string;\n    span_id: string;\n    start_timestamp: number;\n    status?: string;\n    tags?: { [key: string]: string };\n    timestamp?: number;\n    trace_id: string;\n  } {\n    return dropUndefinedKeys({\n      data: Object.keys(this.data).length > 0 ? this.data : undefined,\n      description: this.description,\n      op: this.op,\n      parent_span_id: this.parentSpanId,\n      span_id: this.spanId,\n      start_timestamp: this.startTimestamp,\n      status: this.status,\n      tags: Object.keys(this.tags).length > 0 ? this.tags : undefined,\n      timestamp: this.endTimestamp,\n      trace_id: this.traceId,\n    });\n  }\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}